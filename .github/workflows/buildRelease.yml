name: Build Release

on:
  push:
    branches: 
      - main
      - release-*
    tags:        
      - v*

env:
  PROJECT_PATH: SimpleCalculations\SimpleCalculations.sln
  CONFIGURATION: Release
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}\output
  GITHUB_TOKEN: ${{ github.token }}


jobs:
  build_release:
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore -c ${{ env.CONFIGURATION }}

    - name: Test
      run: dotnet test ${{ env.PROJECT_PATH }} -c ${{ env.CONFIGURATION }} --no-build --collect:"XPlat Code Coverage"

    - name: Install Reportgenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Create Report
      run: reportgenerator -reports:".\SimpleCalculations\SimpleCalculations.Tests\TestResults\**\coverage.cobertura.xml" -targetdir:./coverlet/reports -reporttypes:"Cobertura"

  GitHub_Release:
    runs-on: windows-latest
    #needs: build_release
    #if: startsWith(github.ref, 'refs/tags/v')
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x   

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}   

    - name: Pack Package
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} -c ${{ env.CONFIGURATION }}  --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
        dotnet nuget add source --username maxl-13 --password ${{ env.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/maxl-13/index.json"
        dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}\*.nupkg -k ${{ env.GITHUB_TOKEN }} --source "github" --skip-duplicate

    - name: tes
      run: ${{ env.GitBuildVersion }}

    - name: test
      run: echo $(nbgv get-version --variable version)

    - name: ls
      run: ls
    
    - name: ls2
      run: ls ${{ env.PACKAGE_OUTPUT_DIRECTORY }}\*.nupkg

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.GitBuildVersion }}
        release_name: Release-${{ env.GitBuildVersion }}
        #body_path: ./releaseNotes.md
        body: "test"
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: './version.json'
        asset_name: version.json
        asset_content_type: application/octet-stream
    - name: Upload Release Asset
      id: upload-release-asset2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: '.\output\*.nupkg'
        asset_name: package.nupkg
        asset_content_type: application/octet-stream