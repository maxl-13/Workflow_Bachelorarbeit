<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NerdBank.GitVersioning</name>
    </assembly>
    <members>
        <member name="T:Nerdbank.GitVersioning.CloudBuild">
            <summary>
            Provides access to cloud build providers.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.CloudBuild.SupportedCloudBuilds">
            <summary>
            An array of cloud build systems we support.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.CloudBuild.Active">
            <summary>
            Gets the cloud build provider that applies to this build, if any.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.CloudBuild.ShouldStartWith(System.String,System.String)">
            <summary>
            Gets the specified string, prefixing it with some value if it is non-empty and lacks the prefix.
            </summary>
            <param name="prefix">The prefix that should be included in the returned value.</param>
            <param name="value">The value to prefix.</param>
            <returns>The <paramref name="value" /> provided, with <paramref name="prefix" /> prepended
            if the value doesn't already start with that string and the value is non-empty.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.CloudBuild.IfStartsWith(System.String,System.String)">
            <summary>
            Gets the specified string if it starts with a given prefix; otherwise null.
            </summary>
            <param name="value">The value to return.</param>
            <param name="prefix">The prefix to check for.</param>
            <returns><paramref name="value"/> if it starts with <paramref name="prefix"/>; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.AppVeyor">
            <summary>
            
            </summary>
            <remarks>
            The AppVeyor-specific properties referenced here are documented here:
            http://www.appveyor.com/docs/environment-variables 
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.CloudBuildServices.AppVeyor.BuildingBranch">
            <summary>
            
            </summary>
            <remarks>
            AppVeyor's branch variable is the target branch of a PR, which is *NOT* to be misinterpreted 
            as building the target branch itself. So only set the branch built property if it's not a PR.
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.AtlassianBamboo">
            <summary>
            
            </summary>
            <remarks>
            The Bamboo-specific properties referenced here are documented here:
            https://confluence.atlassian.com/bamboo/bamboo-variables-289277087.html
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.GitLab">
            <summary>
            
            </summary>
            <remarks>
            The GitLab-specific properties referenced here are documented here:
            https://docs.gitlab.com/ce/ci/variables/README.html
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.Jenkins">
            <remarks>
            The Jenkins-specific properties referenced here are documented here:
            https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin#GitPlugin-Environmentvariables
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.SpaceAutomation">
            <summary>
            SpaceAutomation CI build support.
            </summary>
            <remarks>
            The SpaceAutomation-specific properties referenced here are documented here:
            https://www.jetbrains.com/help/space/automation-environment-variables.html
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.TeamCity">
            <summary>
            TeamCity CI build support.
            </summary>
            <remarks>
            The TeamCity-specific properties referenced here are documented here:
            https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.Travis">
            <summary>
            Travis CI build support.
            </summary>
            <remarks>
            The Travis CI environment variables referenced here are documented here:
            https://docs.travis-ci.com/user/environment-variables/#default-environment-variables
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.VisualStudioTeamServices">
            <summary>
            
            </summary>
            <remarks>
            The VSTS-specific properties referenced here are documented here:
            https://msdn.microsoft.com/en-us/Library/vs/alm/Build/scripts/variables
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.Commands.CloudCommand">
            <summary>
            Implementation of the "nbgv cloud" command that updates the build environments variables with version variables.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandError">
            <summary>
            Defines the possible errors of the "cloud" command
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandError.NoCloudBuildProviderMatch">
            <summary>
            The specified CI system was not found.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandError.DuplicateCloudVariable">
            <summary>
            A cloud variable was defined multiple times.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandError.NoCloudBuildEnvDetected">
            <summary>
            No supported cloud build environment could be detected.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandException">
            <summary>
            Exception indicating an error while setting build variables.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandException.Error">
            <summary>
            Gets the error that occurred.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandException.#ctor(System.String,Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandError)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="error">The error that occurred.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.Commands.CloudCommand.#ctor(System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.Commands.CloudCommand"/>.
            </summary>
            <param name="outputWriter">The <see cref="T:System.IO.TextWriter"/> to write output to (e.g. <see cref="P:System.Console.Out" />).</param>
            <param name="errorWriter">The <see cref="T:System.IO.TextWriter"/> to write error messages to (e.g. <see cref="P:System.Console.Error" />).</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.Commands.CloudCommand.SetBuildVariables(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Adds version variables to the the current cloud build environment.
            </summary>
            <exception cref="T:Nerdbank.GitVersioning.Commands.CloudCommand.CloudCommandException">Thrown when the build environment could not be updated.</exception>
            <param name="projectDirectory">
            The path to the directory which may (or its ancestors may) define the version file.
            </param>
            <param name="metadata">
            Optionally adds an identifier to the build metadata part of a semantic version.
            </param>
            <param name="version">
            The string to use for the cloud build number. If not specified, the computed version will be used.
            </param>
            <param name="ciSystem">
            The CI system to activate. If not specified, auto-detection will be used.
            </param>
            <param name="allVars">
            Controls whether to define all version variables as cloud build variables.
            </param>
            <param name="commonVars">
            Controls whether to define common version variables as cloud build variables.
            </param>
            <param name="additionalVariables">
            Additional cloud build variables to define.
            </param>
            <param name="alwaysUseLibGit2">
            Force usage of LibGit2 for accessing the git repository.
            </param>
        </member>
        <member name="T:Nerdbank.GitVersioning.FilterPath">
            <summary>
            A filter (include or exclude) representing a repo relative path.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.IsExclude">
            <summary>
            True if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> represents an exclude filter.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.IsInclude">
            <summary>
            <see langword="true"/> if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> represents an include filter.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.RepoRelativePath">
            <summary>
            Path relative to the repository root that this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> represents.
            Directories are delimited with forward slashes.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.IsRoot">
            <summary>
            True if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> represents the root of the repository.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.IsRelative">
            <summary>
            Was the original pathspec parsed as a relative path?
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.Normalize(System.String,System.String)">
            <summary>
            Normalizes a pathspec-like string into a root-relative path.
            </summary>
            <param name="path">
            See <see cref="M:Nerdbank.GitVersioning.FilterPath.#ctor(System.String,System.String)"/> for supported
            formats of pathspecs.
            </param>
            <param name="relativeTo">
            Path that <paramref name="path"/> is relative to.
            Can be empty - which indicates <paramref name="path"/> is
            relative to the root of the repository.
            </param>
            <returns>
            Forward slash delimited string representing the root-relative path.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.#ctor(System.String,System.String)">
             <summary>
             Construct a <see cref="T:Nerdbank.GitVersioning.FilterPath"/> from a pathspec-like string and a
             relative path within the repository.
             </summary>
             <param name="pathSpec">
             A string that supports some pathspec features.
             This path is relative to <paramref name="relativeTo"/>.
            
             Examples:
             - <c>../relative/inclusion.txt</c>
             - <c>:/absolute/inclusion.txt</c>
             - <c>:!relative/exclusion.txt</c>
             - <c>:^relative/exclusion.txt</c>
             - <c>:^/absolute/exclusion.txt</c>
             </param>
             <param name="relativeTo">
             Path (relative to the root of the repository) that <paramref name="pathSpec"/> is relative to.
             Can be empty - which indicates <paramref name="pathSpec"/> is
             relative to the root of the repository.
             </param>
             <exception cref="T:System.FormatException">Invalid path spec.</exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.Excludes(System.String,System.Boolean)">
            <summary>
            Determines if <paramref name="repoRelativePath"/> should be excluded by this <see cref="T:Nerdbank.GitVersioning.FilterPath"/>.
            </summary>
            <param name="repoRelativePath">Forward-slash delimited path (repo relative).</param>
            <param name="ignoreCase">
            Whether paths should be compared case insensitively.
            Should be the 'core.ignorecase' config value for the repository.
            </param>
            <returns>
            True if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> is an excluding filter that matches
            <paramref name="repoRelativePath"/>, otherwise false.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.Includes(System.String,System.Boolean)">
            <summary>
            Determines if <paramref name="repoRelativePath"/> should be included by this <see cref="T:Nerdbank.GitVersioning.FilterPath"/>.
            </summary>
            <param name="repoRelativePath">Forward-slash delimited path (repo relative).</param>
            <param name="ignoreCase">
            Whether paths should be compared case insensitively.
            Should be the 'core.ignorecase' config value for the repository.
            </param>
            <returns>
            True if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> is an including filter that matches
            <paramref name="repoRelativePath"/>, otherwise false.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.IncludesChildren(System.String,System.Boolean)">
            <summary>
            Determines if children of <paramref name="repoRelativePath"/> may be included
            by this <see cref="T:Nerdbank.GitVersioning.FilterPath"/>.
            </summary>
            <param name="repoRelativePath">Forward-slash delimited path (repo relative).</param>
            <param name="ignoreCase">
            Whether paths should be compared case insensitively.
            Should be the 'core.ignorecase' config value for the repository.
            </param>
            <returns>
            <see langword="true"/> if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> is an including filter that may match
            children of <paramref name="repoRelativePath"/>, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.ToPathSpec(System.String)">
            <summary>
            Convert this path filter to a pathspec.
            </summary>
            <param name="repoRelativeBaseDirectory">
            Repo-relative directory that relative pathspecs should be relative to.
            Can be empty - which indicates this <c>FilterPath</c> is
            relative to the root of the repository.
            </param>
            <returns>String representation of a path filter (a pathspec)</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.GitContext">
            <summary>
            Represents a location and commit within a git repo and provides access to some version-related git activities.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.GitContext.SemVer0">
            <summary>
            The 0.0 semver.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.GitContext.Version0">
            <summary>
            The 0.0 version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.GitContext.MaximumBuildNumberOrRevisionComponent">
            <summary>
            Maximum allowable value for the <see cref="P:System.Version.Build"/>
            and <see cref="P:System.Version.Revision"/> components.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.GitContext"/> class.</summary>
            <param name="workingTreePath">The absolute path to the root of the working tree.</param>
            <param name="dotGitPath">The path to the .git folder.</param>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.WorkingTreePath">
            <summary>
            Gets the absolute path to the base directory of the git working tree.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.RepoRelativeProjectDirectory">
            <summary>
            Gets the path to the directory to read version information from, relative to the <see cref="P:Nerdbank.GitVersioning.GitContext.WorkingTreePath"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.AbsoluteProjectDirectory">
            <summary>
            Gets the absolute path to the directory to read version information from.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.VersionFile">
            <summary>
            Gets an instance of <see cref="T:Nerdbank.GitVersioning.VersionFile"/> that will read version information from the context identified by this instance.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.IsRepository">
            <summary>
            Gets a value indicating whether a git repository was found at <see cref="P:Nerdbank.GitVersioning.GitContext.WorkingTreePath"/>;
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.GitCommitId">
            <summary>
            Gets the full SHA-1 id of the commit to be read.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.IsHead">
            <summary>
            Gets a value indicating whether <see cref="P:Nerdbank.GitVersioning.GitContext.GitCommitId"/> refers to the commit at HEAD.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.IsShallow">
            <summary>
            Gets a value indicating whether the repo is a shallow repo.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.GitCommitDate">
            <summary>
            Gets the date that the commit identified by <see cref="P:Nerdbank.GitVersioning.GitContext.GitCommitId"/> was created.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.HeadCanonicalName">
            <summary>
            Gets the canonical name for HEAD's position (e.g. <c>refs/heads/master</c>)
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitContext.DotGitPath">
            <summary>
            Gets the path to the .git folder.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.Create(System.String,System.String,System.Boolean)">
            <summary>
            Creates a context for reading/writing version information at a given path and committish.
            </summary>
            <param name="path">The path to a directory for which version information is required.</param>
            <param name="committish">The SHA-1 or ref for a git commit.</param>
            <param name="writable"><see langword="true"/> if mutating the git repository may be required; <see langword="false" /> otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.TrySelectCommit(System.String)">
            <summary>
            Sets the context to represent a particular git commit.
            </summary>
            <param name="committish">Any committish string (e.g. commit id, branch, tag).</param>
            <returns><see langword="true" /> if the string was successfully parsed into a commit; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.ApplyTag(System.String)">
            <summary>
            Adds a tag with the given name to the commit identified by <see cref="P:Nerdbank.GitVersioning.GitContext.GitCommitId"/>.
            </summary>
            <param name="name">The name of the tag.</param>
            <exception cref="T:System.NotSupportedException">May be thrown if the context was created without specifying write access was required.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Nerdbank.GitVersioning.GitContext.GitCommitId"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.Stage(System.String)">
            <summary>
            Adds the specified path to the stage for the working tree.
            </summary>
            <param name="path">The path to be staged.</param>
            <exception cref="T:System.NotSupportedException">May be thrown if the context was created without specifying write access was required.</exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.GetShortUniqueCommitId(System.Int32)">
            <summary>
            Gets the shortest string that uniquely identifies the <see cref="P:Nerdbank.GitVersioning.GitContext.GitCommitId"/>.
            </summary>
            <param name="minLength">A minimum length.</param>
            <returns>A string that is at least <paramref name="minLength"/> in length but may be more as required to uniquely identify the git object identified by <see cref="P:Nerdbank.GitVersioning.GitContext.GitCommitId"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.IsVersionFileChangedInWorkingTree(Nerdbank.GitVersioning.VersionOptions,Nerdbank.GitVersioning.VersionOptions)">
            <summary>
            Gets a value indicating whether the version file has changed in the working tree.
            </summary>
            <param name="committedVersion">
            The commited <see cref="T:Nerdbank.GitVersioning.VersionOptions"/>.
            </param>
            <param name="workingVersion">
            The working version of <see cref="T:Nerdbank.GitVersioning.VersionOptions"/>.
            </param>
            <returns><see langword="true" /> if the version file is dirty; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.Dispose(System.Boolean)">
            <summary>
            Disposes of native and managed resources associated by this object.
            </summary>
            <param name="disposing"><see langword="true" /> to dispose managed and native resources; <see langword="false" /> to only dispose of native resources.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitContext.FindGitDir(System.String)">
            <summary>
            Searches a path and its ancestors for a directory with a .git subdirectory.
            </summary>
            <param name="path">The absolute path to start the search from.</param>
            <returns>The path to the .git folder and working tree, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.GitException">
            <summary>
            The exception which is thrown by the managed Git layer.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.GitException"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.GitException"/> class.
            </summary>
            <param name="message"><inheritdoc cref="M:System.Exception.#ctor(System.String)" path="/param"/></param>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.GitException"/> with an
            error message and an inner message.
            </summary>
            <param name="message">
            A message which describes the error.
            </param>
            <param name="innerException">
            The <see cref="T:System.Exception"/> which caused this exception to be thrown.
            </param>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.GitException"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitException.ErrorCode">
            <summary>
            Gets the error code for this exception.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.GitException.iSShallowClone">
            <summary>
            Gets a value indicating whether the exception was thrown from a shallow clone.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.GitException.ErrorCodes">
            <summary>
            Describes specific error conditions that may warrant branching code paths.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.GitException.ErrorCodes.Unspecified">
            <summary>
            No error code was specified.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.GitException.ErrorCodes.ObjectNotFound">
            <summary>
            An object could not be found.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.ICloudBuild">
            <summary>
            Defines cloud build provider functionality.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.IsApplicable">
            <summary>
            Gets a value indicating whether the active cloud build matches what this instance supports.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.IsPullRequest">
            <summary>
            Gets a value indicating whether a cloud build is validating a pull request.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.BuildingBranch">
            <summary>
            Gets the branch being built by a cloud build, if applicable.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.BuildingTag">
            <summary>
            Gets the tag being built by a cloud build, if applicable.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.GitCommitId">
            <summary>
            Gets the git commit ID being built by a cloud build, if applicable.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ICloudBuild.SetCloudBuildNumber(System.String,System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Sets the build number for the cloud build, if supported.
            </summary>
            <param name="buildNumber">The build number to set.</param>
            <param name="stdout">An optional redirection for what should be written to the standard out stream.</param>
            <param name="stderr">An optional redirection for what should be written to the standard error stream.</param>
            <returns>A dictionary of environment/build variables that the caller should set to update the environment to match the new settings.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ICloudBuild.SetCloudBuildVariable(System.String,System.String,System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Sets a cloud build variable, if supported.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value for the variable.</param>
            <param name="stdout">An optional redirection for what should be written to the standard out stream.</param>
            <param name="stderr">An optional redirection for what should be written to the standard error stream.</param>
            <returns>A dictionary of environment/build variables that the caller should set to update the environment to match the new settings.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.LibGit2.LibGit2Context">
            <summary>
            A git context implemented in terms of LibGit2Sharp.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.VersionFile">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.Repository">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.Commit">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.GitCommitId">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.IsHead">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.GitCommitDate">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.HeadCanonicalName">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2Context.ApplyTag(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2Context.TrySelectCommit(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2Context.Stage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2Context.GetShortUniqueCommitId(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2Context.Create(System.String,System.String)">
            <param name="path">The path to the .git directory or somewhere in a git working tree.</param>
            <param name="committish">The SHA-1 or ref for a git commit.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2Context.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2Context.OpenGitRepo(System.String,System.Boolean)">
            <summary>
            Opens a <see cref="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.Repository"/> found at or above a specified path.
            </summary>
            <param name="path">The path to the .git directory or the working directory.</param>
            <param name="useDefaultConfigSearchPaths">
            Specifies whether to use default settings for looking up global and system settings.
            <para>
            By default (<paramref name="useDefaultConfigSearchPaths"/> == <c>false</c>), the repository will be configured to only
            use the repository-level configuration ignoring system or user-level configuration (set using <c>git config --global</c>.
            Thus only settings explicitly set for the repo will be available.
            </para>
            <para>
            For example using <c>Repository.Configuration.Get{string}("user.name")</c> to get the user's name will
            return the value set in the repository config or <c>null</c> if the user name has not been explicitly set for the repository.
            </para>
            <para>
            When the caller specifies to use the default configuration search paths (<paramref name="useDefaultConfigSearchPaths"/> == <c>true</c>)
            both repository level and global configuration will be available to the repo as well.
            </para>
            <para>
            In this mode, using <c>Repository.Configuration.Get{string}("user.name")</c> will return the
            value set in the user's global git configuration unless set on the repository level,
            matching the behavior of the <c>git</c> command.
            </para>
            </param>
            <returns>The <see cref="P:Nerdbank.GitVersioning.LibGit2.LibGit2Context.Repository"/> found for the specified path, or <c>null</c> if no git repo is found.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions">
            <summary>
            Git extension methods.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.Version0">
            <summary>
            The 0.0 version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.SemVer0">
            <summary>
            The 0.0 semver.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.MaximumBuildNumberOrRevisionComponent">
            <summary>
            Maximum allowable value for the <see cref="P:System.Version.Build"/>
            and <see cref="P:System.Version.Revision"/> components.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetVersionHeight(Nerdbank.GitVersioning.LibGit2.LibGit2Context,System.Version)">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive)
            that set the version to the value at <paramref name="context"/>.
            </summary>
            <param name="context">The git context to read from.</param>
            <param name="baseVersion">Optional base version to calculate the height. If not specified, the base version will be calculated by scanning the repository.</param>
            <returns>The height of the commit. Always a positive integer.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetHeight(Nerdbank.GitVersioning.LibGit2.LibGit2Context,System.Func{LibGit2Sharp.Commit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive).
            </summary>
            <param name="context">The git context to read from.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the commit. Always a positive integer.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetTruncatedCommitIdAsUInt16(LibGit2Sharp.Commit)">
            <summary>
            Takes the first 2 bytes of a commit ID (i.e. first 4 characters of its hex-encoded SHA)
            and returns them as an 16-bit unsigned integer.
            </summary>
            <param name="commit">The commit to identify with an integer.</param>
            <returns>The unsigned integer which identifies a commit.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetRepository(LibGit2Sharp.IBelongToARepository)">
            <summary>
            Returns the repository that <paramref name="repositoryMember"/> belongs to.
            </summary>
            <param name="repositoryMember">Member of the repository.</param>
            <returns>Repository that <paramref name="repositoryMember"/> belongs to.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetCommitFromVersion(Nerdbank.GitVersioning.LibGit2.LibGit2Context,System.Version)">
            <summary>
            Looks up the commit that matches a specified version number.
            </summary>
            <param name="context">The git context to read from.</param>
            <param name="version">The version previously obtained from <see cref="P:Nerdbank.GitVersioning.VersionOracle.Version"/>.</param>
            <returns>The matching commit, or <c>null</c> if no match is found.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown in the very rare situation that more than one matching commit is found.
            </exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetCommitsFromVersion(Nerdbank.GitVersioning.LibGit2.LibGit2Context,System.Version)">
            <summary>
            Looks up the commits that match a specified version number.
            </summary>
            <param name="context">The git context to read from.</param>
            <param name="version">The version previously obtained from <see cref="P:Nerdbank.GitVersioning.VersionOracle.Version"/>.</param>
            <returns>The matching commits, or an empty enumeration if no match is found.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.FindLibGit2NativeBinaries(System.String)">
            <summary>
            Finds the directory that contains the appropriate native libgit2 module.
            </summary>
            <param name="basePath">The path to the directory that contains the lib folder.</param>
            <returns>Receives the directory that native binaries are expected.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.CommitMatchesVersion(LibGit2Sharp.Commit,Nerdbank.GitVersioning.SemanticVersion,Nerdbank.GitVersioning.SemanticVersion.Position,Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GitWalkTracker)">
            <summary>
            Tests whether a commit is of a specified version, comparing major and minor components
            with the version.txt file defined by that commit.
            </summary>
            <param name="commit">The commit to test.</param>
            <param name="expectedVersion">The version to test for in the commit</param>
            <param name="comparisonPrecision">The last component of the version to include in the comparison.</param>
            <param name="tracker">The caching tracker for storing or fetching version information per commit.</param>
            <returns><c>true</c> if the <paramref name="commit"/> matches the major and minor components of <paramref name="expectedVersion"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.CommitMatchesVersion(LibGit2Sharp.Commit,System.Version,Nerdbank.GitVersioning.SemanticVersion.Position,Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GitWalkTracker)">
            <summary>
            Tests whether a commit's version-spec matches a given version-spec.
            </summary>
            <param name="commit">The commit to test.</param>
            <param name="expectedVersion">The version to test for in the commit</param>
            <param name="comparisonPrecision">The last component of the version to include in the comparison.</param>
            <param name="tracker">The caching tracker for storing or fetching version information per commit.</param>
            <returns><c>true</c> if the <paramref name="commit"/> matches the major and minor components of <paramref name="expectedVersion"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.StartsWith(LibGit2Sharp.ObjectId,System.UInt16,System.Boolean,System.UInt16)">
            <summary>
            Tests whether an object's ID starts with the specified 16-bits, or a subset of them.
            </summary>
            <param name="object">The object whose ID is to be tested.</param>
            <param name="leadingBytes">The leading 16-bits to be tested.</param>
            <param name="bitMask">The mask that indicates which bits should be compared.</param>
            <param name="bigEndian"><see langword="true"/> to read the first two bytes as big endian (v3.5+ behavior); <see langword="false"/> to use little endian (v3.4 and earlier behavior).</param>
            <returns><c>True</c> if the object's ID starts with <paramref name="leadingBytes"/> after applying the <paramref name="bitMask"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.EncodeAsHex(System.Byte[])">
            <summary>
            Encodes a byte array as hex.
            </summary>
            <param name="buffer">The buffer to encode.</param>
            <returns>A hexidecimal string.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetCommitHeight(LibGit2Sharp.Commit,Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GitWalkTracker,System.Func{LibGit2Sharp.Commit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified branch's head and the most distant ancestor (inclusive).
            </summary>
            <param name="startingCommit">The commit to measure the height of.</param>
            <param name="tracker">The caching tracker for storing or fetching version information per commit.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the branch.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetCommitsReachableFromRefs(LibGit2Sharp.Repository)">
            <summary>
            Enumerates over the set of commits in the repository that are reachable from any named reference.
            </summary>
            <param name="repo">The repo to search.</param>
            <returns>An enumerate of commits.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetIdAsVersionHelper(LibGit2Sharp.Commit,Nerdbank.GitVersioning.VersionOptions,System.Int32)">
            <summary>
            Encodes a commit from history in a <see cref="T:System.Version"/>
            so that the original commit can be found later.
            </summary>
            <param name="commit">The commit whose ID and position in history is to be encoded.</param>
            <param name="versionOptions">The version options applicable at this point (either from commit or working copy).</param>
            <param name="versionHeight">The version height, previously calculated by a call to <see cref="M:Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions.GetVersionHeight(Nerdbank.GitVersioning.LibGit2.LibGit2Context,System.Version)"/>.</param>
            <returns>
            A version whose <see cref="P:System.Version.Build"/> and
            <see cref="P:System.Version.Revision"/> components are calculated based on the commit.
            </returns>
            <remarks>
            In the returned version, the <see cref="P:System.Version.Build"/> component is
            the height of the git commit while the <see cref="P:System.Version.Revision"/>
            component is the first four bytes of the git commit id (forced to be a positive integer).
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.LibGit2.LibGit2VersionFile">
            <summary>
            Exposes queries and mutations on a version.json or version.txt file,
            implemented in terms of libgit2sharp.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.LibGit2.LibGit2VersionFile.PreferredFileNames">
            <summary>
            A sequence of possible filenames for the version file in preferred order.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.LibGit2.LibGit2VersionFile.GetVersion(LibGit2Sharp.Commit,System.String,System.Collections.Generic.Dictionary{LibGit2Sharp.ObjectId,Nerdbank.GitVersioning.VersionOptions},System.String@)">
            <summary>
            Reads the version.json file and returns the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> deserialized from it.
            </summary>
            <param name="commit">The commit to read from.</param>
            <param name="repoRelativeProjectDirectory">The directory to consider when searching for the version.txt file.</param>
            <param name="blobVersionCache">An optional blob cache for storing the raw parse results of a version.txt or version.json file (before any inherit merge operations are applied).</param>
            <param name="actualDirectory">Receives the full path to the directory in which the version file was found.</param>
            <returns>The version information read from the file.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.DeltaInstruction">
            <summary>
            Represents an instruction in a deltified stream.
            </summary>
            <seealso href="https://git-scm.com/docs/pack-format#_deltified_representation"/>
        </member>
        <member name="F:Nerdbank.GitVersioning.ManagedGit.DeltaInstruction.InstructionType">
            <summary>
            Gets or sets the type of the current instruction.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ManagedGit.DeltaInstruction.Offset">
            <summary>
            If the <see cref="F:Nerdbank.GitVersioning.ManagedGit.DeltaInstruction.InstructionType"/> is <see cref="F:Nerdbank.GitVersioning.ManagedGit.DeltaInstructionType.Copy"/>,
            the offset of the base stream to start copying from.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ManagedGit.DeltaInstruction.Size">
            <summary>
            The number of bytes to copy or insert.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.DeltaInstructionType">
            <summary>
            Enumerates the various instruction types which can be found in a deltafied stream.
            </summary>
            <seealso href="https://git-scm.com/docs/pack-format#_deltified_representation"/>
        </member>
        <member name="F:Nerdbank.GitVersioning.ManagedGit.DeltaInstructionType.Insert">
            <summary>
            Instructs the caller to insert a new byte range into the object.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ManagedGit.DeltaInstructionType.Copy">
            <summary>
            Instructs the caller to copy a byte range from the source object.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.DeltaStreamReader">
            <summary>
            Reads delta instructions from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <seealso href="https://git-scm.com/docs/pack-format#_deltified_representation"/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.DeltaStreamReader.Read(System.IO.Stream)">
            <summary>
            Reads the next instruction from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The stream from which to read the instruction.
            </param>
            <returns>
            The next instruction if found; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.DeltaStreamReader.Read(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            Reads the next instruction from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The stream from which to read the instruction.
            </param>
            <returns>
            The next instruction if found; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.FileHelpers.TryOpen(System.String,System.IO.FileStream@)">
            <summary>
            Opens the file with a given path, if it exists.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="stream">The stream to open to, if the file exists.</param>
            <returns><see langword="true" /> if the file exists; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.FileHelpers.TryOpen(System.ReadOnlySpan{System.Char},System.IO.FileStream@)">
            <summary>
            Opens the file with a given path, if it exists.
            </summary>
            <param name="path">The path to the file, as a null-terminated UTF-16 character array.</param>
            <param name="stream">The stream to open to, if the file exists.</param>
            <returns><see langword="true" /> if the file exists; otherwise <see langword="false" />.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitCommit">
            <summary>
            Represents a Git commit, as stored in the Git object database.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.Tree">
            <summary>
            Gets or sets the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> of the file tree which represents directory
            structure of the repository at the time of the commit.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.Sha">
            <summary>
            Gets or sets a <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> which uniquely identifies the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.FirstParent">
            <summary>
            Gets or sets the first parent of this commit.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.SecondParent">
            <summary>
            Gets or sets the second parent of this commit.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.AdditionalParents">
            <summary>
            Gets or sets additional parents (3rd parent and on) of this commit, if any.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.Parents">
            <summary>
            Gets an enumerator for parents of this commit.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.Author">
            <summary>
            Gets or sets the author of this commit.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.Equals(Nerdbank.GitVersioning.ManagedGit.GitCommit)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.op_Equality(Nerdbank.GitVersioning.ManagedGit.GitCommit,Nerdbank.GitVersioning.ManagedGit.GitCommit)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.op_Inequality(Nerdbank.GitVersioning.ManagedGit.GitCommit,Nerdbank.GitVersioning.ManagedGit.GitCommit)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerable">
            <summary>
            An enumerable for parents of a commit.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerable.#ctor(Nerdbank.GitVersioning.ManagedGit.GitCommit)">
            <summary>
            Initializes an instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerable"/> struct.
            </summary>
            <param name="owner">The commit whose parents are to be enumerated.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerable.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerator">
            <summary>
            An enumerator for a commit's parents.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerator.#ctor(Nerdbank.GitVersioning.ManagedGit.GitCommit)">
            <summary>
            Initializes an instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerator"/> struct.
            </summary>
            <param name="owner">The commit whose parents are to be enumerated.</param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommit.ParentEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitCommitReader">
            <summary>
            Reads a <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit"/> object.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommitReader.Read(System.IO.Stream,Nerdbank.GitVersioning.ManagedGit.GitObjectId,System.Boolean)">
            <summary>
            Reads a <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit"/> object from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> which contains the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit"/> in its text representation.
            </param>
            <param name="sha">
            The <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> of the commit.
            </param>
            <param name="readAuthor">
            A value indicating whether to populate the <see cref="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.Author"/> field.
            </param>
            <returns>
            The <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitCommitReader.Read(System.ReadOnlySpan{System.Byte},Nerdbank.GitVersioning.ManagedGit.GitObjectId,System.Boolean)">
            <summary>
            Reads a <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit"/> object from a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <param name="commit">
            A <see cref="T:System.ReadOnlySpan`1"/> which contains the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit"/> in its text representation.
            </param>
            <param name="sha">
            The <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> of the commit.
            </param>
            <param name="readAuthor">
            A value indicating whether to populate the <see cref="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.Author"/> field.
            </param>
            <returns>
            The <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitCommit"/>.
            </returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId">
            <summary>
            A <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> identifies an object stored in the Git repository. The
            <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> of an object is the SHA-1 hash of the contents of that
            object.
            </summary>
            <seealso href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects"/>.
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitObjectId.Value">
            <summary>
            Gets the 20 byte ID of this object as a span from the <see cref="F:Nerdbank.GitVersioning.ManagedGit.GitObjectId.value"/> field.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitObjectId.Empty">
            <summary>
            Gets a <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> which represents an empty <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.Parse(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a <see cref="T:System.ReadOnlySpan`1"/> which contains the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>
            as a sequence of byte values.
            </summary>
            <param name="value">
            The <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> as a sequence of byte values. Must be exactly 20 bytes in length.
            </param>
            <returns>
            A <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> which contains the hexadecimal representation of a
            <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </summary>
            <param name="value">
            A <see cref="T:System.String"/> which contains the hexadecimal representation of the
            <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </param>
            <returns>
            A <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.ParseHex(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses a <see cref="T:System.ReadOnlySpan`1"/> which contains the hexadecimal representation of a
            <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </summary>
            <param name="value">
            A <see cref="T:System.ReadOnlySpan`1"/> which contains the hexadecimal representation of the
            <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> encoded in ASCII.
            </param>
            <returns>
            A <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.Equals(Nerdbank.GitVersioning.ManagedGit.GitObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.op_Equality(Nerdbank.GitVersioning.ManagedGit.GitObjectId,Nerdbank.GitVersioning.ManagedGit.GitObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.op_Inequality(Nerdbank.GitVersioning.ManagedGit.GitObjectId,Nerdbank.GitVersioning.ManagedGit.GitObjectId)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.AsUInt16">
            <summary>
            Gets a <see cref="T:System.UInt16"/> which represents the first two bytes of this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </summary>
            <returns>
            A <see cref="T:System.UInt16"/> which represents the first two bytes of this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.ToString">
            <summary>
            Returns the SHA1 hash of this object.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.CopyAsHex(System.Int32,System.Int32,System.Span{System.Char})">
            <summary>
            Encodes a portion of this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> as hex.
            </summary>
            <param name="start">
            The index of the first byte of this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> to start copying.
            </param>
            <param name="length">
            The number of bytes of this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> to copy.
            </param>
            <param name="chars">The buffer that receives the hex characters. It must be at least twice as long as <paramref name="length"/>.</param>
            <remarks>
            This method is used to populate file paths as byte* objects which are passed to UTF-16-based
            Windows APIs.
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectId.CopyTo(System.Span{System.Byte})">
            <summary>
            Copies the byte representation of this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> to a <see cref="T:System.Span`1"/>.
            </summary>
            <param name="value">
            The memory to which to copy this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </param>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitObjectStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> which reads data stored in the Git object store. The data is stored
            as a gz-compressed stream, and is prefixed with the object type and data length.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitObjectStream.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectStream"/>  class.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> from which to read data.
            </param>
            <param name="objectType">
            The expected object type of the git object.
            </param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitObjectStream.ObjectType">
            <summary>
            Gets the object type of this Git object.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitObjectStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitObjectStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitObjectStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPack">
            <summary>
            Supports retrieving objects from a Git pack file.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPack.GetObjectFromRepositoryDelegate">
            <summary>
            A delegate for methods which fetch objects from the Git object store.
            </summary>
            <param name="sha">
            The Git object ID of the object to fetch.
            </param>
            <param name="objectType">
            The object type of the object to fetch.
            </param>
            <returns>
            A <see cref="T:System.IO.Stream"/> which represents the requested object.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPack.#ctor(Nerdbank.GitVersioning.ManagedGit.GitPack.GetObjectFromRepositoryDelegate,System.String,System.String,Nerdbank.GitVersioning.ManagedGit.GitPackCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPack"/> class.
            </summary>
            <param name="getObjectFromRepositoryDelegate">
            A delegate which fetches objects from the Git object store.
            </param>
            <param name="indexPath">
            The full path to the index file.
            </param>
            <param name="packPath">
            The full path to the pack file.
            </param>
            <param name="cache">
            A <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackCache"/> which is used to cache <see cref="T:System.IO.Stream"/> objects which operate
            on the pack file.
            </param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPack.#ctor(Nerdbank.GitVersioning.ManagedGit.GitPack.GetObjectFromRepositoryDelegate,System.Lazy{System.IO.FileStream},System.Func{System.IO.FileStream},Nerdbank.GitVersioning.ManagedGit.GitPackCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPack"/> class.
            </summary>
            <param name="getObjectFromRepositoryDelegate">
            A delegate which fetches objects from the Git object store.
            </param>
            <param name="indexStream">
            A function which creates a new <see cref="T:System.IO.Stream"/> which provides read-only
            access to the index file.
            </param>
            <param name="packStream">
            A function which creates a new <see cref="T:System.IO.Stream"/> which provides read-only
            access to the pack file.
            </param>
            <param name="cache">
            A <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackCache"/> which is used to cache <see cref="T:System.IO.Stream"/> objects which operate
            on the pack file.
            </param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPack.GetObjectFromRepository">
            <summary>
            Gets a delegate which fetches objects from the Git object store.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPack.Lookup(System.Span{System.Byte},System.Boolean)">
            <summary>
            Finds a git object using a partial object ID.
            </summary>
            <param name="objectId">
            A partial object ID.
            </param>
            <param name="endsWithHalfByte"><inheritdoc cref="M:Nerdbank.GitVersioning.ManagedGit.GitPackIndexReader.GetOffset(System.Span{System.Byte},System.Boolean)" path="/param[@name='endsWithHalfByte']"/></param>
            <returns>
            If found, a full object ID which matches the partial object ID.
            Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPack.TryGetObject(Nerdbank.GitVersioning.ManagedGit.GitObjectId,System.String,System.IO.Stream@)">
            <summary>
            Attempts to retrieve a Git object from this Git pack.
            </summary>
            <param name="objectId">
            The Git object Id of the object to retrieve.
            </param>
            <param name="objectType">
            The object type of the object to retrieve.
            </param>
            <param name="value">
            If found, receives a <see cref="T:System.IO.Stream"/> which represents the object.
            </param>
            <returns>
            <see langword="true"/> if the object was found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPack.GetObject(System.Int64,System.String)">
            <summary>
            Gets a Git object at a specific offset.
            </summary>
            <param name="offset">
            The offset of the Git object, relative to the pack file.
            </param>
            <param name="objectType">
            The object type of the object to retrieve.
            </param>
            <returns>
            A <see cref="T:System.IO.Stream"/> which represents the object.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPack.GetCacheStatistics(System.Text.StringBuilder)">
            <summary>
            Writes cache statistics to a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">
            A <see cref="T:System.Text.StringBuilder"/> to which the cache statistics are written.
            </param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPack.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPackCache">
            <summary>
            Represents a cache in which objects retrieved from a <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPack"/>
            are cached. Caching these objects can be of interest, because retrieving
            data from a <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPack"/> can be potentially expensive: the data is
            compressed and can be deltified.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackCache.TryOpen(System.Int64,System.IO.Stream@)">
            <summary>
            Attempts to retrieve a Git object from cache.
            </summary>
            <param name="offset">
            The offset of the Git object in the Git pack.
            </param>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> which will be set to the cached Git object.
            </param>
            <returns>
            <see langword="true"/> if the object was found in cache; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackCache.GetCacheStatistics(System.Text.StringBuilder)">
            <summary>
            Gets statistics about the cache usage.
            </summary>
            <param name="builder">
            A <see cref="T:System.Text.StringBuilder"/> to which to write the statistics.
            </param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackCache.Add(System.Int64,System.IO.Stream)">
            <summary>
            Adds a Git object to this cache.
            </summary>
            <param name="offset">
            The offset of the Git object in the Git pack.
            </param>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> which represents the object to add. This stream
            will be copied to the cache.
            </param>
            <returns>
            A <see cref="T:System.IO.Stream"/> which represents the cached entry.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackCache.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackCache.Dispose(System.Boolean)">
            <summary>
            Disposes of native and managed resources associated by this object.
            </summary>
            <param name="disposing"><see langword="true" /> to dispose managed and native resources; <see langword="false" /> to only dispose of native resources.</param>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream">
            <summary>
            Reads data from a deltafied object.
            </summary>
            <seealso href="https://git-scm.com/docs/pack-format#_deltified_representation"/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream"/> class.
            </summary>
            <param name="baseStream">
            The base stream to which the deltas are applied.
            </param>
            <param name="deltaStream">
            A <see cref="T:System.IO.Stream"/> which contains a sequence of <see cref="T:Nerdbank.GitVersioning.ManagedGit.DeltaInstruction"/>s.
            </param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.BaseStream">
            <summary>
            Gets the base stream to which the deltas are applied.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPackIndexMappedReader">
            <summary>
            A <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackIndexReader"/> which uses a memory-mapped file to read from the index.
            </summary>
            <seealso href="https://git-scm.com/docs/pack-format"/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackIndexMappedReader.#ctor(System.IO.FileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackIndexMappedReader"/> class.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.FileStream"/> which points to the index file.
            </param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackIndexMappedReader.GetOffset(System.Span{System.Byte},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackIndexMappedReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPackIndexReader">
            <summary>
            Base class for classes which support reading data stored in a Git Pack file.
            </summary>
            <seealso href="https://git-scm.com/docs/pack-format"/>
        </member>
        <member name="F:Nerdbank.GitVersioning.ManagedGit.GitPackIndexReader.Header">
            <summary>
            The header of the index file.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackIndexReader.GetOffset(Nerdbank.GitVersioning.ManagedGit.GitObjectId)">
            <summary>
            Gets the offset of a Git object in the index file.
            </summary>
            <param name="objectId">
            The Git object Id of the Git object for which to get the offset.
            </param>
            <returns>
            If found, the offset of the Git object in the index file; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackIndexReader.GetOffset(System.Span{System.Byte},System.Boolean)">
            <summary>
            Gets the offset of a Git object in the index file.
            </summary>
            <param name="objectId">
            A partial or full Git object id, in its binary representation.
            </param>
            <param name="endsWithHalfByte"><see langword="true"/> if <paramref name="objectId"/> ends with a byte whose last 4 bits are all zeros and not intended for inclusion in the search; <see langword="false"/> otherwise.</param>
            <returns>
            If found, the offset of the Git object in the index file; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackIndexReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache">
            <summary>
            <para>
              The <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache"/> implements the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackCache"/> abstract class.
              When a <see cref="T:System.IO.Stream"/> is added to the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache"/>, it is wrapped in a
              <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCacheStream"/>. This stream allows for just-in-time, random, read-only
              access to the underlying data (which may deltafied and/or compressed).
            </para>
            <para>
              Whenever data is read from a <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCacheStream"/>, the call is forwarded to the
              underlying <see cref="T:System.IO.Stream"/> and cached in a <see cref="T:System.IO.MemoryStream"/>. If the same data is read
              twice, it is read from the <see cref="T:System.IO.MemoryStream"/>, rather than the underlying <see cref="T:System.IO.Stream"/>.
            </para>
            <para>
              <see cref="M:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache.Add(System.Int64,System.IO.Stream)"/> and <see cref="M:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache.TryOpen(System.Int64,System.IO.Stream@)"/> return <see cref="T:System.IO.Stream"/>
              objects which may operate on the same underlying <see cref="T:System.IO.Stream"/>, but independently maintain
              their state.
            </para>
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache.Add(System.Int64,System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache.TryOpen(System.Int64,System.IO.Stream@)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache.GetCacheStatistics(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCacheStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCacheViewStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPackNullCache">
            <summary>
            A no-op implementation of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackCache"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackNullCache.Instance">
            <summary>
            Gets the default instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackCache"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackNullCache.Add(System.Int64,System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackNullCache.TryOpen(System.Int64,System.IO.Stream@)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackNullCache.GetCacheStatistics(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream">
            <summary>
            A pooled <see cref="T:System.IO.Stream"/>, which wraps around a
            <see cref="T:System.IO.FileStream"/> which will be returned to a pool
            instead of actually being closed when <see cref="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Dispose(System.Boolean)"/> is called.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.#ctor(System.IO.Stream,System.Collections.Generic.Queue{Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream})">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream"/> class.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.FileStream"/> which is being pooled.
            </param>
            <param name="pool">
            A <see cref="T:System.Collections.Generic.Queue`1"/> to which the stream will be returned.
            </param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.BaseStream">
            <summary>
            Gets the underlying <see cref="T:System.IO.FileStream"/> for this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitRepository">
            <summary>
            Provides access to a Git repository.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ManagedGit.GitRepository.objectPathBuffer">
            <summary>
            UTF-16 encoded string.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.Create(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitRepository"/> class.
            </summary>
            <param name="workingDirectory"><inheritdoc cref="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.#ctor(System.String,System.String,System.String,System.String)" path="/param[@name='workingDirectory']" /></param>
            <returns>
            A <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitRepository"/> which represents the git repository, or <see langword="null"/>
            if no git repository was found.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitRepository"/> class.
            </summary>
            <param name="workingDirectory"><inheritdoc cref="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.#ctor(System.String,System.String,System.String,System.String)" path="/param[@name='workingDirectory']" /></param>
            <param name="gitDirectory"><inheritdoc cref="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.#ctor(System.String,System.String,System.String,System.String)" path="/param[@name='gitDirectory']" /> </param>
            <param name="commonDirectory"><inheritdoc cref="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.#ctor(System.String,System.String,System.String,System.String)" path="/param[@name='commonDirectory']" /></param>
            <param name="objectDirectory"><inheritdoc cref="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.#ctor(System.String,System.String,System.String,System.String)" path="/param[@name='objectDirectory']" /></param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitRepository"/> class.
            </summary>
            <param name="workingDirectory">
            The current working directory. This can be a subdirectory of the Git repository.
            </param>
            <param name="gitDirectory">
            The directory in which the git HEAD file is stored. This is the .git directory unless the working directory is a worktree.
            </param>
            <param name="commonDirectory">
            The common Git directory, which is parent to the objects, refs, and other directories.
            </param>
            <param name="objectDirectory">
            The object directory in which Git objects are stored.
            </param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitRepository.IgnoreCase">
            <summary>
            Gets a value indicating whether this Git repository is case-insensitive.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitRepository.WorkingDirectory">
            <summary>
            Gets the path to the current working directory.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitRepository.GitDirectory">
            <summary>
            Gets the path to the Git directory, in which at minimum HEAD is stored.
            Use <see cref="P:Nerdbank.GitVersioning.ManagedGit.GitRepository.CommonDirectory"/> for all other metadata (e.g. references, configuration).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitRepository.CommonDirectory">
            <summary>
            Gets the path to the common directory, in which shared Git data (e.g. objects) are stored.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitRepository.ObjectDirectory">
            <summary>
            Gets the path to the Git object directory. It is a subdirectory of <see cref="P:Nerdbank.GitVersioning.ManagedGit.GitRepository.CommonDirectory"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitRepository.Encoding">
            <summary>
            Gets the encoding used by this Git repository.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.ShortenObjectId(Nerdbank.GitVersioning.ManagedGit.GitObjectId,System.Int32)">
            <summary>
            Shortens the object id
            </summary>
            <param name="objectId">
            The object Id to shorten.
            </param>
            <param name="minimum">
            The minimum string length.
            </param>
            <returns>
            The short object id.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetHeadAsReferenceOrSha">
            <summary>
            Returns the current HEAD as a reference (if available) or a Git object id.
            </summary>
            <returns>
            The current HEAD as a reference (if available) or a Git object id.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetHeadCommitSha">
            <summary>
            Gets the object ID of the current HEAD.
            </summary>
            <returns>
            The object ID of the current HEAD.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetHeadCommit(System.Boolean)">
            <summary>
            Gets the current HEAD commit, if available.
            </summary>
            <param name="readAuthor">
            A value indicating whether to populate the <see cref="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.Author"/> field.
            </param>
            <returns>
            The current HEAD commit, or <see langword="null"/> if not available.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetCommit(Nerdbank.GitVersioning.ManagedGit.GitObjectId,System.Boolean)">
            <summary>
            Gets a commit by its Git object Id.
            </summary>
            <param name="sha">
            The Git object Id of the commit.
            </param>
            <param name="readAuthor">
            A value indicating whether to populate the <see cref="P:Nerdbank.GitVersioning.ManagedGit.GitCommit.Author"/> field.
            </param>
            <returns>
            The requested commit.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.Lookup(System.String)">
            <summary>
            Parses any committish to an object id.
            </summary>
            <param name="objectish">Any "objectish" string (e.g. commit ID (partial or full), branch name, tag name, or "HEAD").</param>
            <returns>The object ID referenced by <paramref name="objectish"/> if found; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetTree(Nerdbank.GitVersioning.ManagedGit.GitObjectId)">
            <summary>
            Gets a tree object by its Git object Id.
            </summary>
            <param name="sha">
            The Git object Id of the tree.
            </param>
            <returns>
            The requested tree.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetTreeEntry(Nerdbank.GitVersioning.ManagedGit.GitObjectId,System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets an entry in a git tree.
            </summary>
            <param name="treeId">
            The Git object Id of the Git tree.
            </param>
            <param name="nodeName">
            The name of the node in the Git tree.
            </param>
            <returns>
            The object Id of the requested entry. Returns <see cref="P:Nerdbank.GitVersioning.ManagedGit.GitObjectId.Empty"/> if the entry
            could not be found.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetObjectBySha(Nerdbank.GitVersioning.ManagedGit.GitObjectId,System.String)">
            <summary>
            Gets a Git object by its Git object Id.
            </summary>
            <param name="sha">
            The Git object id of the object to retrieve.
            </param>
            <param name="objectType">
            The type of object to retrieve.
            </param>
            <returns>
            A <see cref="T:System.IO.Stream"/> which represents the requested object.
            </returns>
            <exception cref="T:Nerdbank.GitVersioning.GitException">
            The requested object could not be found.
            </exception>
            <remarks>
            As a special case, a <see langword="null"/> value will be returned for
            <see cref="P:Nerdbank.GitVersioning.ManagedGit.GitObjectId.Empty"/>.
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.TryGetObjectBySha(Nerdbank.GitVersioning.ManagedGit.GitObjectId,System.String,System.IO.Stream@)">
            <summary>
            Gets a Git object by its Git object Id.
            </summary>
            <param name="sha">
            The Git object id of the object to retrieve.
            </param>
            <param name="objectType">
            The type of object to retrieve.
            </param>
            <param name="value">
            An output parameter which retrieves the requested Git object.
            </param>
            <returns>
            <see langword="true"/> if the object could be found; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetCacheStatistics">
            <summary>
            Gets cache usage statistics.
            </summary>
            <returns>
            A <see cref="T:System.String"/> which represents the cache usage statistics.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.GetString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes a sequence of bytes from the specified byte array into a <see cref="T:System.String"/>.
            </summary>
            <param name="bytes">
            The span containing the sequence of UTF-8 bytes to decode.
            </param>
            <returns>
            A <see cref="T:System.String"/> that contains the results of decoding the specified sequence of bytes.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.ParseAlternates(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses the contents of the alternates file, and returns a list of (relative) paths to the alternate object directories.
            </summary>
            <param name="alternates">
            The contents of the alternates files.
            </param>
            <returns>
            A list of (relative) paths to the alternate object directories.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitRepository.ParseAlternates(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Parses the contents of the alternates file, and returns a list of (relative) paths to the alternate object directories.
            </summary>
            <param name="alternates">
            The contents of the alternates files.
            </param>
            <param name="skipCount">
            The number of bytes to skip in the span when looking for a delimiter.
            </param>
            <returns>
            A list of (relative) paths to the alternate object directories.
            </returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitSignature">
            <summary>
            Represents the signature of a Git committer or author.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitSignature.Name">
            <summary>
            Gets or sets the name of the committer or author.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitSignature.Email">
            <summary>
            Gets or sets the e-mail address of the commiter or author.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitSignature.Date">
            <summary>
            Gets or sets the date and time at which the commit was made.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitTree">
            <summary>
            Represents a git tree.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitTree.Empty">
            <summary>
            Gets an empty <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitTree"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitTree.Sha">
            <summary>
            The Git object Id of this <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitTree.Children">
            <summary>
            Gets a dictionary which contains all entries in the current tree, accessible by name.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitTree.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitTreeEntry">
            <summary>
            Represents an individual entry in the Git tree.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitTreeEntry.#ctor(System.String,System.Boolean,Nerdbank.GitVersioning.ManagedGit.GitObjectId)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitTreeEntry"/> class.
            </summary>
            <param name="name">
            The name of the entry.
            </param>
            <param name="isFile">
            A vaolue indicating whether the current entry is a file.
            </param>
            <param name="sha">
            The Git object Id of the blob or tree of the current entry.
            </param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitTreeEntry.Name">
            <summary>
            Gets the name of the entry.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitTreeEntry.IsFile">
            <summary>
            Gets a value indicating whether the current entry is a file.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.GitTreeEntry.Sha">
            <summary>
            Gets the Git object Id of the blob or tree of the current entry.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitTreeEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.GitTreeStreamingReader">
            <summary>
            Reads git tree objects.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.GitTreeStreamingReader.FindNode(System.IO.Stream,System.ReadOnlySpan{System.Byte})">
            <summary>
            Finds a specific node in a git tree.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> which represents the git tree.
            </param>
            <param name="name">
            The name of the node to find, in it UTF-8 representation.
            </param>
            <returns>
            The <see cref="T:Nerdbank.GitVersioning.ManagedGit.GitObjectId"/> of the requested node.
            </returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream">
            <summary>
            Provides read-only, seekable access to a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile"/>.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.#ctor(System.IO.MemoryMappedFiles.MemoryMappedViewAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream"/> class.
            </summary>
            <param name="accessor">
            The accessor to the memory mapped stream.
            </param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.StreamExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.IO.Stream"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.StreamExtensions.ReadAll(System.IO.Stream,System.Span{System.Byte})">
            <summary>
            Reads data from a <see cref="T:System.IO.Stream"/> to fill a given buffer.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> from which to read data.
            </param>
            <param name="buffer">
            A buffer into which to store the data read.
            </param>
            <exception cref="T:System.IO.EndOfStreamException">Thrown when the stream runs out of data before <paramref name="buffer"/> could be filled.</exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.StreamExtensions.ReadMbsInt(System.IO.Stream)">
            <summary>
            Reads an variable-length integer off a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The stream off which to read the variable-length integer.
            </param>
            <returns>
            The requested value.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">Thrown when the stream runs out of data before the integer could be read.</exception>
        </member>
        <member name="T:Nerdbank.GitVersioning.ManagedGit.ZLibStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> which reads zlib-compressed data.
            </summary>
            <remarks>
            <para>
              This stream parses but ignores the two-byte zlib header at the start of the compressed
              stream.
            </para>
            <para>
              This stream keeps track of the current position and, if provided via the constructor,
              the length.
            </para>
            <para>
              This class wraps a <see cref="T:System.IO.Compression.DeflateStream"/> rather than inheriting from it, because
              <see cref="T:System.IO.Compression.DeflateStream"/> detects whether <c>Read(Span{byte})</c> is being overriden
              and behaves differently when it is.
            </para>
            <para>
              .NET 5.0 ships with a built-in ZLibStream; which may render (parts of) this implementation
              obsolete.
            </para>
            </remarks>
            <seealso href="https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs#L236-L249"/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.ManagedGit.ZLibStream"/>  class.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> from which to read data.
            </param>
            <param name="length">
            The size of the uncompressed data.
            </param>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.ZLibStream.BaseStream">
            <summary>
            Gets the <see cref="T:System.IO.Stream"/> from which the data is being read.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Position">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.ZLibStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.ZLibStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Nerdbank.GitVersioning.ManagedGit.ZLibStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.ManagedGit.ZLibStream.Initialize(System.Int64)">
            <summary>
            Initializes the length and position properties.
            </summary>
            <param name="length">
            The length of this <see cref="T:Nerdbank.GitVersioning.ManagedGit.ZLibStream"/> class.
            </param>
        </member>
        <member name="T:Nerdbank.GitVersioning.Managed.ManagedGitContext">
            <summary>
            A git context implemented without any native code dependency.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.Managed.ManagedGitContext.Repository">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.Managed.ManagedGitContext.Commit">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.Managed.ManagedGitContext.VersionFile">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.Managed.ManagedGitContext.GitCommitId">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.Managed.ManagedGitContext.IsHead">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.Managed.ManagedGitContext.GitCommitDate">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.Managed.ManagedGitContext.HeadCanonicalName">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedGitContext.ApplyTag(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedGitContext.TrySelectCommit(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedGitContext.Stage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedGitContext.Create(System.String,System.String)">
            <param name="path">The path to the .git directory or somewhere in a git working tree.</param>
            <param name="committish">The SHA-1 or ref for a git commit.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedGitContext.GetShortUniqueCommitId(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedGitContext.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedGitContext.GetIdAsVersionHelper(Nerdbank.GitVersioning.VersionOptions,System.Int32)">
            <summary>
            Encodes a commit from history in a <see cref="T:System.Version"/>
            so that the original commit can be found later.
            </summary>
            <param name="versionOptions">The version options applicable at this point (either from commit or working copy).</param>
            <param name="versionHeight">The version height, previously calculated.</param>
            <returns>
            A version whose <see cref="P:System.Version.Build"/> and
            <see cref="P:System.Version.Revision"/> components are calculated based on the commit.
            </returns>
            <remarks>
            In the returned version, the <see cref="P:System.Version.Build"/> component is
            the height of the git commit while the <see cref="P:System.Version.Revision"/>
            component is the first four bytes of the git commit id (forced to be a positive integer).
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.Managed.GitExtensions.SemVer0">
            <summary>
            The 0.0 semver.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.GitExtensions.GetVersionHeight(Nerdbank.GitVersioning.Managed.ManagedGitContext,System.Version)">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive)
            that set the version to the value at <paramref name="context"/>.
            </summary>
            <param name="context">The git context for which to calculate the height.</param>
            <param name="baseVersion">Optional base version to calculate the height. If not specified, the base version will be calculated by scanning the repository.</param>
            <returns>The height of the commit. Always a positive integer.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.GitExtensions.CommitMatchesVersion(Nerdbank.GitVersioning.ManagedGit.GitCommit,Nerdbank.GitVersioning.SemanticVersion,Nerdbank.GitVersioning.SemanticVersion.Position,Nerdbank.GitVersioning.Managed.GitExtensions.GitWalkTracker)">
            <summary>
            Tests whether a commit is of a specified version, comparing major and minor components
            with the version.txt file defined by that commit.
            </summary>
            <param name="commit">The commit to test.</param>
            <param name="expectedVersion">The version to test for in the commit</param>
            <param name="comparisonPrecision">The last component of the version to include in the comparison.</param>
            <param name="tracker">The caching tracker for storing or fetching version information per commit.</param>
            <returns><c>true</c> if the <paramref name="commit"/> matches the major and minor components of <paramref name="expectedVersion"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.GitExtensions.GetHeight(Nerdbank.GitVersioning.Managed.ManagedGitContext,System.Func{Nerdbank.GitVersioning.ManagedGit.GitCommit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive).
            </summary>
            <param name="context">The git context.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the commit. Always a positive integer.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.GitExtensions.GetCommitHeight(Nerdbank.GitVersioning.ManagedGit.GitRepository,Nerdbank.GitVersioning.ManagedGit.GitCommit,Nerdbank.GitVersioning.Managed.GitExtensions.GitWalkTracker,System.Func{Nerdbank.GitVersioning.ManagedGit.GitCommit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified branch's head and the most distant ancestor (inclusive).
            </summary>
            <param name="repository">The Git repository.</param>
            <param name="startingCommit">The commit to measure the height of.</param>
            <param name="tracker">The caching tracker for storing or fetching version information per commit.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the branch.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.GitExtensions.GetTruncatedCommitIdAsUInt16(Nerdbank.GitVersioning.ManagedGit.GitCommit)">
            <summary>
            Takes the first 2 bytes of a commit ID (i.e. first 4 characters of its hex-encoded SHA)
            and returns them as an 16-bit unsigned integer.
            </summary>
            <param name="commit">The commit to identify with an integer.</param>
            <returns>The unsigned integer which identifies a commit.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.Managed.ManagedVersionFile">
            <summary>
            Exposes queries and mutations on a version.json or version.txt file,
            implemented in terms of our private managed git implementation.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.Managed.ManagedVersionFile.TxtFileNameBytes">
            <summary>
            The filename of the version.txt file, as a byte array.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.Managed.ManagedVersionFile.JsonFileNameBytes">
            <summary>
            The filename of the version.json file, as a byte array.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedVersionFile.#ctor(Nerdbank.GitVersioning.GitContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.Managed.ManagedVersionFile"/> class.
            </summary>
            <param name="context"><inheritdoc /></param>
        </member>
        <member name="M:Nerdbank.GitVersioning.Managed.ManagedVersionFile.GetVersion(Nerdbank.GitVersioning.ManagedGit.GitCommit,System.String,System.Collections.Generic.Dictionary{Nerdbank.GitVersioning.ManagedGit.GitObjectId,Nerdbank.GitVersioning.VersionOptions},System.String@)">
            <summary>
            Reads the version.json file and returns the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> deserialized from it.
            </summary>
            <param name="commit">The commit to read from.</param>
            <param name="repoRelativeProjectDirectory">The directory to consider when searching for the version.txt file.</param>
            <param name="blobVersionCache">An optional blob cache for storing the raw parse results of a version.txt or version.json file (before any inherit merge operations are applied).</param>
            <param name="actualDirectory">Receives the full path to the directory in which the version file was found.</param>
            <returns>The version information read from the file.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager">
            <summary>
            Methods for creating releases
            </summary>
            <remarks>
            This class authors git commits, branches, etc. and thus must use libgit2 rather than our internal managed implementation which is read-only.
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError">
            <summary>
            Defines the possible errors that can occur when preparing a release
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.NoGitRepo">
            <summary>
            The project directory is not a git repository
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.UncommittedChanges">
            <summary>
            There are pending changes in the project directory
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.InvalidBranchNameSetting">
            <summary>
            The "branchName" setting in "version.json" is invalid
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.NoVersionFile">
            <summary>
            version.json/version.txt not found
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.VersionDecrement">
            <summary>
            Updating the version would result in a version lower than the previous version
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.NoVersionIncrement">
            <summary>
            Branch cannot be set to the specified version because the new version is not higher than the current version
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.BranchAlreadyExists">
            <summary>
            Cannot create a branch because it already exists
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.UserNotConfigured">
            <summary>
            Cannot create a commit because user name and user email are not configured (either at the repo or global level)
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.DetachedHead">
            <summary>
            HEAD is detached. A branch must be checked out first.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.InvalidVersionIncrementSetting">
            <summary>
            The versionIncrement setting cannot be applied to the current version.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException">
            <summary>
            Exception indicating an error during preparation of a release
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException.Error">
            <summary>
            Gets the error that occurred.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException.#ctor(Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException"/>
            </summary>
            <param name="error">The error that occurred.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException.#ctor(Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException"/>
            </summary>
            <param name="error">The error that occurred.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager.ReleaseInfo">
            <summary>
            Encapsulates information on a release created through <see cref="T:Nerdbank.GitVersioning.ReleaseManager"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ReleaseManager.ReleaseInfo.CurrentBranch">
            <summary>
            Gets information on the 'current' branch, i.e. the branch the release was created from.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ReleaseManager.ReleaseInfo.NewBranch">
            <summary>
            Gets information on the new branch created by <see cref="T:Nerdbank.GitVersioning.ReleaseManager"/>.
            </summary>
            <value>
            Information on the newly created branch as instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo"/> or <c>null</c>, if no new branch was created.
            </value>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.ReleaseInfo.#ctor(Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleaseInfo"/>.
            </summary>
            <param name="currentBranch">Information on the branch the release was created from.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.ReleaseInfo.#ctor(Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo,Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleaseInfo"/>.
            </summary>
            <param name="currentBranch">Information on the branch the release was created from.</param>
            <param name="newBranch">Information on the newly created branch.</param>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo">
            <summary>
            Encapsulates information on a branch created or updated by <see cref="T:Nerdbank.GitVersioning.ReleaseManager"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo.Name">
            <summary>
            The name of the branch, e.g. <c>master</c>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo.Commit">
            <summary>
            The id of the branch's tip commit after the update.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo.Version">
            <summary>
            The version configured in the branch's <c>version.json</c>.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo.#ctor(System.String,System.String,Nerdbank.GitVersioning.SemanticVersion)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleaseBranchInfo"/>.
            </summary>
            <param name="name">The name of the branch.</param>
            <param name="commit">The id of the branch's tip.</param>
            <param name="version">The version configured in the branch's <c>version.json</c>.</param>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager.ReleaseManagerOutputMode">
            <summary>
            Enumerates the output formats supported by <see cref="T:Nerdbank.GitVersioning.ReleaseManager"/>.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleaseManagerOutputMode.Text">
            <summary>
            Use unstructured text output.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleaseManagerOutputMode.Json">
            <summary>
            Output information about the release as JSON.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.#ctor(System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager"/>.
            </summary>
            <param name="outputWriter">The <see cref="T:System.IO.TextWriter"/> to write output to (e.g. <see cref="P:System.Console.Out" />).</param>
            <param name="errorWriter">The <see cref="T:System.IO.TextWriter"/> to write error messages to (e.g. <see cref="P:System.Console.Error" />).</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.PrepareRelease(System.String,System.String,System.Version,System.Nullable{Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement},Nerdbank.GitVersioning.ReleaseManager.ReleaseManagerOutputMode)">
            <summary>
            Prepares a release for the specified directory by creating a release branch and incrementing the version in the current branch.
            </summary>
            <exception cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException">Thrown when the release could not be created.</exception>
            <param name="projectDirectory">
            The path to the directory which may (or its ancestors may) define the version file.
            </param>
            <param name="releaseUnstableTag">
            The prerelease tag to add to the version on the release branch. Pass <c>null</c> to omit/remove the prerelease tag.
            The leading hyphen may be specified or omitted.
            </param>
            <param name="nextVersion">
            The next version to save to the version file on the current branch. Pass <c>null</c> to automatically determine the next
            version based on the current version and the <c>versionIncrement</c> setting in <c>version.json</c>.
            Parameter will be ignored if the current branch is a release branch.
            </param>
            <param name="versionIncrement">
            The increment to apply in order to determine the next version on the current branch.
            If specified, value will be used instead of the increment specified in <c>version.json</c>.
            Parameter will be ignored if the current branch is a release branch.
            </param>
            <param name="outputMode">
            The output format to use for writing to stdout.
            </param>
        </member>
        <member name="T:Nerdbank.GitVersioning.SemanticVersion">
            <summary>
            Describes a version with an optional unstable tag.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.FullSemVerPattern">
            <summary>
            The regular expression with capture groups for semantic versioning.
            It considers PATCH to be optional and permits the 4th Revision component.
            </summary>
            <remarks>
            Parts of this regex inspired by https://github.com/sindresorhus/semver-regex/blob/master/index.js
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.PrereleasePattern">
            <summary>
            The regex pattern that a prerelease must match.
            </summary>
            <remarks>
            Keep in sync with the regex for the version field found in the version.schema.json file.
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.BuildMetadataPattern">
            <summary>
            The regex pattern that build metadata must match.
            </summary>
            <remarks>
            Keep in sync with the regex for the version field found in the version.schema.json file.
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.FullSemVerWithMacrosPattern">
            <summary>
            The regular expression with capture groups for semantic versioning,
            allowing for macros such as {height}.
            </summary>
            <remarks>
            Keep in sync with the regex for the version field found in the version.schema.json file.
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.#ctor(System.Version,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> class.
            </summary>
            <param name="version">The numeric version.</param>
            <param name="prerelease">The prerelease, with leading - character.</param>
            <param name="buildMetadata">The build metadata, with leading + character.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> class.
            </summary>
            <param name="version">The x.y.z numeric version.</param>
            <param name="prerelease">The prerelease, with leading - character.</param>
            <param name="buildMetadata">The build metadata, with leading + character.</param>
        </member>
        <member name="T:Nerdbank.GitVersioning.SemanticVersion.Position">
            <summary>
            Identifies the various positions in a semantic version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Major">
            <summary>
            The <see cref="P:System.Version.Major"/> component.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Minor">
            <summary>
            The <see cref="P:System.Version.Minor"/> component.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Build">
            <summary>
            The <see cref="P:System.Version.Build"/> component.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Revision">
            <summary>
            The <see cref="P:System.Version.Revision"/> component.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Prerelease">
            <summary>
            The <see cref="F:Nerdbank.GitVersioning.SemanticVersion.Position.Prerelease"/> portion of the version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.BuildMetadata">
            <summary>
            The <see cref="F:Nerdbank.GitVersioning.SemanticVersion.Position.BuildMetadata"/> portion of the version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.Prerelease">
            <summary>
            Gets an unstable tag (with the leading hyphen), if applicable.
            </summary>
            <value>A string with a leading hyphen or the empty string.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.BuildMetadata">
            <summary>
            Gets the build metadata (with the leading plus), if applicable.
            </summary>
            <value>A string with a leading plus or the empty string.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.VersionHeightPosition">
            <summary>
            Gets the position in a computed version that the version height should appear.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.GitCommitIdPosition">
            <summary>
            Gets the position in a computed version that the first 16 bits of a git commit ID should appear, if any.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.IsDefault">
            <summary>
            Gets a value indicating whether this instance is the default "0.0" instance.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.DebuggerDisplay">
            <summary>
            Gets the debugger display for this instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.TryParse(System.String,Nerdbank.GitVersioning.SemanticVersion@)">
            <summary>
            Parses a semantic version from the given string.
            </summary>
            <param name="semanticVersion">The value which must wholly constitute a semantic version to succeed.</param>
            <param name="version">Receives the semantic version, if found.</param>
            <returns><c>true</c> if a semantic version is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.Parse(System.String)">
            <summary>
            Parses a semantic version from the given string.
            </summary>
            <param name="semanticVersion">The value which must wholly constitute a semantic version to succeed.</param>
            <returns>An instance of <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/>, initialized to the value specified in <paramref name="semanticVersion"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.Equals(System.Object)">
            <summary>
            Checks equality against another object.
            </summary>
            <param name="obj">The other instance.</param>
            <returns><c>true</c> if the instances have equal values; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.ToString">
            <summary>
            Prints this instance as a string.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.Equals(Nerdbank.GitVersioning.SemanticVersion)">
            <summary>
            Checks equality against another instance of this class.
            </summary>
            <param name="other">The other instance.</param>
            <returns><c>true</c> if the instances have equal values; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.WillVersionChangeResetVersionHeight(Nerdbank.GitVersioning.SemanticVersion,Nerdbank.GitVersioning.SemanticVersion,Nerdbank.GitVersioning.SemanticVersion.Position)">
            <summary>
            Tests whether two <see cref="T:Nerdbank.GitVersioning.SemanticVersion" /> instances are compatible enough that version height is not reset
            when progressing from one to the next.
            </summary>
            <param name="first">The first semantic version.</param>
            <param name="second">The second semantic version.</param>
            <param name="versionHeightPosition">The position within the version where height is tracked.</param>
            <returns><c>true</c> if transitioning from one version to the next should reset the version height; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.IsMatchingVersion(System.Version)">
            <summary>
            Checks whether a given version may have been produced by this semantic version.
            </summary>
            <param name="version">The version to test.</param>
            <returns><see langword="true"/> if the <paramref name="version"/> is a match; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.Contains(System.Version)">
            <summary>
            Checks whether a particular version number
            belongs to the set of versions represented by this semantic version spec.
            </summary>
            <param name="version">A version, with major and minor components, and possibly build and/or revision components.</param>
            <returns><c>true</c> if <paramref name="version"/> may have been produced by this semantic version; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.VerifyPatternMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Verifies that the prerelease tag follows semver rules.
            </summary>
            <param name="input">The input string to test.</param>
            <param name="pattern">The regex that the string must conform to.</param>
            <param name="parameterName">The name of the parameter supplying the <paramref name="input"/>.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if the <paramref name="input"/> does not match the required <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Version"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionExtensions.EnsureNonNegativeComponents(System.Version,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Version"/> instance where the specified number of components
            are guaranteed to be non-negative. Any applicable negative components are converted to zeros.
            </summary>
            <param name="version">The version to use as a template for the returned value.</param>
            <param name="fieldCount">The number of version components to ensure are non-negative.</param>
            <returns>
            The same as <paramref name="version"/> except with any applicable negative values
            translated to zeros.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionExtensions.ToStringSafe(System.Version,System.Int32)">
            <summary>
            Converts the value of the current System.Version object to its equivalent System.String
            representation. A specified count indicates the number of components to return.
            </summary>
            <param name="version">The instance to serialize as a string.</param>
            <param name="fieldCount">The number of components to return. The fieldCount ranges from 0 to 4.</param>
            <returns>
            The System.String representation of the values of the major, minor, build, and
            revision components of the current System.Version object, each separated by a
            period character ('.'). The fieldCount parameter determines how many components
            are returned.fieldCount Return Value 0 An empty string (""). 1 major 2 major.minor
            3 major.minor.build 4 major.minor.build.revision For example, if you create System.Version
            object using the constructor Version(1,3,5), ToString(2) returns "1.3" and ToString(4)
            returns "1.3.5.0".
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionExtensions.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Version"/> class,
            allowing for the last two integers to possibly be -1.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="build">The build version.</param>
            <param name="revision">The revision.</param>
            <returns></returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionFile">
            <summary>
            Exposes queries and mutations on a version.json or version.txt file.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionFile.TxtFileName">
            <summary>
            The filename of the version.txt file.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionFile.JsonFileName">
            <summary>
            The filename of the version.json file.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.#ctor(Nerdbank.GitVersioning.GitContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionFile"/> class.
            </summary>
            <param name="context">The git context to use when reading version files.</param>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionFile.Context">
            <summary>
            Gets the git context to use when reading version files.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.IsVersionDefined">
            <summary>
            Checks whether a version file is defined.
            </summary>
            <returns><c>true</c> if the version file is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetWorkingCopyVersion">
            <inheritdoc cref="M:Nerdbank.GitVersioning.VersionFile.GetWorkingCopyVersion(System.String@)"/>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetWorkingCopyVersion(System.String@)">
            <summary>
            Reads the version file from the working tree and returns the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> deserialized from it.
            </summary>
            <param name="actualDirectory">Set to the actual directory that the version file was found in, which may be <see cref="P:Nerdbank.GitVersioning.GitContext.WorkingTreePath"/> or one of its ancestors.</param>
            <returns>The version information read from the file, or <c>null</c> if the file wasn't found.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.SetVersion(System.String,System.Version,System.String,System.Boolean)">
            <inheritdoc cref="M:Nerdbank.GitVersioning.VersionFile.SetVersion(System.String,Nerdbank.GitVersioning.VersionOptions,System.Boolean)"/>
            <param name="unstableTag">The optional unstable tag to include in the file.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.SetVersion(System.String,Nerdbank.GitVersioning.VersionOptions,System.Boolean)">
            <summary>
            Writes the version.json file to a directory within a repo with the specified version information.
            </summary>
            <param name="projectDirectory">
            The path to the directory in which to write the version.json file.
            The file's impact will be all descendent projects and directories from this specified directory,
            except where any of those directories have their own version.json file.
            </param>
            <param name="version">The version information to write to the file.</param>
            <param name="includeSchemaProperty">A value indicating whether to serialize the $schema property for easier editing in most JSON editors.</param>
            <returns>The path to the file written.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetVersionCore(System.String@)">
            <summary>
            Reads the version file from <see cref="P:Nerdbank.GitVersioning.GitContext.GitCommitId"/> in the <see cref="P:Nerdbank.GitVersioning.VersionFile.Context"/> and returns the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> deserialized from it.
            </summary>
            <param name="actualDirectory">Receives the absolute path to the directory where the version file was found, if any.</param>
            <returns>The version information read from the file, or <see langword="null"/> if the file wasn't found.</returns>
            <remarks>This method is only called if <see cref="P:Nerdbank.GitVersioning.GitContext.GitCommitId"/> is not null.</remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetVersion">
            <inheritdoc cref="M:Nerdbank.GitVersioning.VersionFile.GetVersion(System.String@)"/>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetVersion(System.String@)">
            <summary>
            Reads the version file from the selected git commit (or working copy if no commit is selected) and returns the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> deserialized from it.
            </summary>
            <param name="actualDirectory">Receives the absolute path to the directory where the version file was found, if any.</param>
            <returns>The version information read from the file, or <see langword="null"/> if the file wasn't found.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.TryReadVersionJsonContent(System.String,System.String)">
            <summary>
            Tries to read a version.json file from the specified string, but favors returning null instead of throwing a <see cref="T:Newtonsoft.Json.JsonSerializationException"/>.
            </summary>
            <param name="jsonContent">The content of the version.json file.</param>
            <param name="repoRelativeBaseDirectory">Directory that this version.json file is relative to the root of the repository.</param>
            <returns>The deserialized <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> object, if deserialization was successful.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.TryReadVersionFile(System.IO.TextReader)">
            <summary>
            Reads the version.txt file and returns the <see cref="T:System.Version"/> and prerelease tag from it.
            </summary>
            <param name="versionTextContent">The content of the version.txt file to read.</param>
            <returns>The version information read from the file; or <c>null</c> if a deserialization error occurs.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetWorkingCopyVersion(System.String,System.String@)">
            <summary>
            Reads a version file from the working tree, without any regard to a git repo.
            </summary>
            <param name="startingDirectory">The path to start the search from.</param>
            <param name="actualDirectory">Receives the directory where the version file was found.</param>
            <returns>The version options, if found.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions">
            <summary>
            Describes the various versions and options required for the build.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.isFrozen">
            <summary>
            A value indicating whether mutations of this instance are not allowed.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.version">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.assemblyVersion">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersion"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.buildNumberOffset">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.BuildNumberOffset"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.semVer1NumericIdentifierPadding">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.SemVer1NumericIdentifierPadding"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.gitCommitIdShortFixedLength">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortFixedLength"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.gitCommitIdShortAutoMinimum">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortAutoMinimum"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.nuGetPackageVersion">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersion"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.publicReleaseRefSpec">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.PublicReleaseRefSpec"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.cloudBuild">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.CloudBuild"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.release">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.Release"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.pathFilters">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.PathFilters"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.inherit">
            <summary>
            Backing field for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.Inherit"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.DefaultVersionPrecision">
            <summary>
            Default value for <see cref="T:Nerdbank.GitVersioning.VersionOptions.VersionPrecision"/>.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionHeightPlaceholder">
            <summary>
            The placeholder that may appear in the <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/> property's <see cref="P:Nerdbank.GitVersioning.SemanticVersion.Prerelease"/>
            to specify where the version height should appear in a computed semantic version.
            </summary>
            <remarks>
            When this macro does not appear in the string, the version height is set as the first unspecified integer of the 4-integer version.
            If all 4 integers in a version are specified, and the macro does not appear, the version height isn't inserted anywhere.
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.DefaultSemVer1NumericIdentifierPadding">
            <summary>
            The default value for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.SemVer1NumericIdentifierPaddingOrDefault"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.DefaultGitCommitIdShortFixedLength">
            <summary>
            The default value for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortFixedLength"/> property.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.Schema">
            <summary>
            The $schema field that should be serialized when writing
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.#ctor(Nerdbank.GitVersioning.VersionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> class.
            </summary>
            <param name="copyFrom">Another instance to copy values from.</param>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.Version">
            <summary>
            Gets or sets the default version to use.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersion">
            <summary>
            Gets or sets the version to use particularly for the <see cref="T:System.Reflection.AssemblyVersionAttribute"/>
            instead of the default <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/>.
            </summary>
            <value>An instance of <see cref="T:System.Version"/> or <c>null</c> to simply use the default <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/>.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdPrefix">
            <summary>
            Gets or sets the prefix for git commit id in version.
            Because of semver rules the prefix must lead with a [A-z_] character (not a number) and it cannot be the empty string.
            If <c>null</c> 'g' will be used.
            </summary>
            <value>A prefix for git commit id.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOrDefault">
            <summary>
            Gets the version to use particularly for the <see cref="T:System.Reflection.AssemblyVersionAttribute"/>
            instead of the default <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/>.
            </summary>
            <value>An instance of <see cref="T:System.Version"/> or <c>null</c> to simply use the default <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/>.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.BuildNumberOffset">
            <summary>
            Gets or sets a number to add to the git height when calculating the version height,
            which typically is used in the <see cref="P:System.Version.Build"/> portion of the computed version.
            </summary>
            <value>Any integer (0, positive, or negative).</value>
            <remarks>
            An error will result if this value is negative with such a magnitude as to exceed the git height,
            resulting in a negative build number.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.VersionHeightOffset">
            <summary>
            Gets or sets a number to add to the git height when calculating the <see cref="P:System.Version.Build"/> number.
            </summary>
            <value>Any integer (0, positive, or negative).</value>
            <remarks>
            An error will result if this value is negative with such a magnitude as to exceed the git height,
            resulting in a negative build number.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.BuildNumberOffsetOrDefault">
            <summary>
            Gets a number to add to the git height when calculating the <see cref="P:System.Version.Build"/> number.
            </summary>
            <value>Any integer (0, positive, or negative).</value>
            <remarks>
            An error will result if this value is negative with such a magnitude as to exceed the git height,
            resulting in a negative build number.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.VersionHeightOffsetOrDefault">
            <summary>
            Gets a number to add to the git height when calculating the <see cref="P:System.Version.Build"/> number.
            </summary>
            <value>Any integer (0, positive, or negative).</value>
            <remarks>
            An error will result if this value is negative with such a magnitude as to exceed the git height,
            resulting in a negative build number.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.SemVer1NumericIdentifierPadding">
            <summary>
            Gets or sets the minimum number of digits to use for numeric identifiers in SemVer 1.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.SemVer1NumericIdentifierPaddingOrDefault">
            <summary>
            Gets the minimum number of digits to use for numeric identifiers in SemVer 1.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortFixedLength">
            <summary>
            Gets or sets the abbreviated git commit hash length.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortAutoMinimum">
            <summary>
            Gets or sets the abbreviated git commit hash length minimum value.
            The git repository provides the value.
            If set to 0 or a git repository is not available, <see cref="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortFixedLength"/> is used.
            The value is 0 by default.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersion">
            <summary>
            Gets or sets the options around NuGet version strings
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOrDefault">
            <summary>
            Gets the options around NuGet version strings
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.PublicReleaseRefSpec">
            <summary>
            Gets or sets an array of regular expressions that describes branch or tag names that should
            be built with PublicRelease=true as the default value on build servers.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.PublicReleaseRefSpecOrDefault">
            <summary>
            Gets an array of regular expressions that describes branch or tag names that should
            be built with PublicRelease=true as the default value on build servers.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuild">
            <summary>
            Gets or sets the options around cloud build.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOrDefault">
            <summary>
            Gets the options around cloud build.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.Release">
            <summary>
            Gets or sets the options for the prepare-release command
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOrDefault">
            <summary>
            Gets the options for the prepare-release command
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.PathFilters">
            <summary>
            Gets or sets a list of paths to use to filter commits when calculating version height.
            If a given commit does not affect any paths in this filter, it is ignored for version height calculations.
            Paths should be relative to the root of the repository.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.Inherit">
            <summary>
            Gets or sets a value indicating whether this options object should inherit from an ancestor any settings that are not explicitly set in this one.
            </summary>
            <remarks>
            When this is <c>true</c>, this object may not completely describe the options to be applied.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.IsFrozen">
            <summary>
            Gets a value indicating whether this instance rejects all attempts to mutate it.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.VersionHeightPosition">
            <summary>
            Gets the position in a computed version that the version height should appear.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdPosition">
            <summary>
            Gets the position in a computed version that the first 16 bits of a git commit ID should appear, if any.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.DebuggerDisplay">
            <summary>
            Gets the debugger display for this instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.FromVersion(System.Version,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> class
            with <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/> initialized with the specified parameters.
            </summary>
            <param name="version">The version number.</param>
            <param name="unstableTag">The prerelease tag, if any.</param>
            <returns>The new instance of <see cref="T:Nerdbank.GitVersioning.VersionOptions"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.GetJsonSettings(System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> to use based on certain requirements.
            The $schema property is not serialized when using this overload.
            </summary>
            <param name="includeDefaults">A value indicating whether default values should be serialized.</param>
            <returns>The serializer settings to use.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.GetJsonSettings(System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> to use based on certain requirements.
            Path filters cannot be serialized or deserialized when using this overload.
            </summary>
            <param name="includeDefaults">A value indicating whether default values should be serialized.</param>
            <param name="includeSchemaProperty">A value indicating whether the $schema property should be serialized.</param>
            <returns>The serializer settings to use.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.GetJsonSettings(System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> to use based on certain requirements.
            </summary>
            <param name="includeDefaults">A value indicating whether default values should be serialized.</param>
            <param name="includeSchemaProperty">A value indicating whether the $schema property should be serialized.</param>
            <param name="repoRelativeBaseDirectory">
            Directory (relative to the root of the repository) that path
            filters should be relative to.
            This should be the directory where the version.json file resides.
            An empty string represents the root of the repository.
            Passing <c>null</c> will mean path filters cannot be serialized.
            </param>
            <returns>The serializer settings to use.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.Equals(System.Object)">
            <summary>
            Checks equality against another object.
            </summary>
            <param name="obj">The other instance.</param>
            <returns><c>true</c> if the instances have equal values; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.Equals(Nerdbank.GitVersioning.VersionOptions)">
            <summary>
            Checks equality against another instance of this class.
            </summary>
            <param name="other">The other instance.</param>
            <returns><c>true</c> if the instances have equal values; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.Freeze">
            <summary>
            Freezes this instance so no more changes can be made to it.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.IsDefaultVersionTheOnlyPropertySet">
            <summary>
            Gets a value indicating whether <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/> is
            set and the only property on this class that is set.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions">
            <summary>
            The class that contains settings for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersion" /> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.DefaultPrecision">
            <summary>
            Default value for <see cref="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.Precision"/>.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions" /> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.#ctor(Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions" /> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.SemVer">
            <summary>
            Gets or sets the version of SemVer (e.g. 1 or 2) that should be used when generating the package version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.SemVerOrDefault">
            <summary>
            Gets the version of SemVer (e.g. 1 or 2) that should be used when generating the package version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.Precision">
            <summary>
            Gets or sets number of version components to include when generating the package version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.PrecisionOrDefault">
            <summary>
            Gets the number of version components to include when generating the package version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.IsFrozen">
            <summary>
            Gets a value indicating whether this instance rejects all attempts to mutate it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.Freeze">
            <summary>
            Freezes this instance so no more changes can be made to it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.Equals(Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions,Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions">
            <summary>
            Describes the details of how the AssemblyVersion value will be calculated.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.#ctor(System.Version,System.Nullable{Nerdbank.GitVersioning.VersionOptions.VersionPrecision})">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions"/> class.
            </summary>
            <param name="version">The assembly version (with major.minor components).</param>
            <param name="precision">The additional version precision to add toward matching the AssemblyFileVersion.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.#ctor(Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Version">
            <summary>
            Gets or sets the components of the assembly version (2-4 components).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Precision">
            <summary>
            Gets or sets the additional version precision to add toward matching the AssemblyFileVersion.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.PrecisionOrDefault">
            <summary>
            Gets the additional version precision to add toward matching the AssemblyFileVersion.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.IsFrozen">
            <summary>
            Gets a value indicating whether this instance rejects all attempts to mutate it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Freeze">
            <summary>
            Freezes this instance so no more changes can be made to it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Equals(Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions,Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions">
            <summary>
            Options that are applicable specifically to cloud builds (e.g. VSTS, AppVeyor, TeamCity)
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.#ctor(Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions"/> class.
            </summary>
            <param name="copyFrom">Another instance to copy values from</param>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetAllVariables">
            <summary>
            Gets or sets a value indicating whether to elevate all build properties to cloud build variables prefaced with "NBGV_".
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetVersionVariables">
            <summary>
            Gets or sets a value indicating whether to elevate certain calculated version build properties to cloud build variables.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetAllVariablesOrDefault">
            <summary>
            Gets a value indicating whether to elevate all build properties to cloud build variables prefaced with "NBGV_".
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetVersionVariablesOrDefault">
            <summary>
            Gets a value indicating whether to elevate certain calculated version build properties to cloud build variables.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.BuildNumber">
            <summary>
            Gets or sets options around how and whether to set the build number preset by the cloud build with one enriched with version information.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.BuildNumberOrDefault">
            <summary>
            Gets options around how and whether to set the build number preset by the cloud build with one enriched with version information.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.IsFrozen">
            <summary>
            Gets a value indicating whether this instance rejects all attempts to mutate it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.Freeze">
            <summary>
            Freezes this instance so no more changes can be made to it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions,Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions">
            <summary>
            Override the build number preset by the cloud build with one enriched with version information.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.#ctor(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.Enabled">
            <summary>
            Gets or sets a value indicating whether to override the build number preset by the cloud build.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.EnabledOrDefault">
            <summary>
            Gets a value indicating whether to override the build number preset by the cloud build.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.IncludeCommitId">
            <summary>
            Gets or sets when and where to include information about the git commit being built.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.IncludeCommitIdOrDefault">
            <summary>
            Gets when and where to include information about the git commit being built.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.IsFrozen">
            <summary>
            Gets a value indicating whether this instance rejects all attempts to mutate it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.Freeze">
            <summary>
            Freezes this instance so no more changes can be made to it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions,Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions">
            <summary>
            Describes when and where to include information about the git commit being built.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.#ctor(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.When">
            <summary>
            Gets or sets the conditions when the commit ID is included in the build number.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.WhenOrDefault">
            <summary>
            Gets the conditions when the commit ID is included in the build number.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.Where">
            <summary>
            Gets or sets the position to include the commit ID information.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.WhereOrDefault">
            <summary>
            Gets the position to include the commit ID information.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.IsFrozen">
            <summary>
            Gets a value indicating whether this instance rejects all attempts to mutate it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.Freeze">
            <summary>
            Freezes this instance so no more changes can be made to it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions,Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions,Nerdbank.GitVersioning.VersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.VersionPrecision">
            <summary>
            The last component to control in a 4 integer version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionPrecision.Major">
            <summary>
            The first integer is the last number set. The rest will be zeros.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionPrecision.Minor">
            <summary>
            The second integer is the last number set. The rest will be zeros.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionPrecision.Build">
            <summary>
            The third integer is the last number set. The fourth will be zero.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionPrecision.Revision">
            <summary>
            All four integers will be set.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhen">
            <summary>
            The conditions a commit ID is included in a cloud build number.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhen.Always">
            <summary>
            Always include the commit information in the cloud Build Number.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhen.NonPublicReleaseOnly">
            <summary>
            Only include the commit information when building a non-PublicRelease.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhen.Never">
            <summary>
            Never include the commit information.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhere">
            <summary>
            The position a commit ID can appear in a cloud build number.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhere.BuildMetadata">
            <summary>
            The commit ID appears in build metadata (e.g. +ga1b2c3).
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhere.FourthVersionComponent">
            <summary>
            The commit ID appears as the 4th integer in the version (e.g. 1.2.3.23523).
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions">
            <summary>
            Encapsulates settings for the "prepare-release" command
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions"/> class
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.#ctor(Nerdbank.GitVersioning.VersionOptions.ReleaseOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions"/> class
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.BranchName">
            <summary>
            Gets or sets the branch name template for release branches
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.BranchNameOrDefault">
            <summary>
            Gets the set branch name template for release branches
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.VersionIncrement">
            <summary>
            Gets or sets the setting specifying how to increment the version when creating a release
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.VersionIncrementOrDefault">
            <summary>
            Gets or sets the setting specifying how to increment the version when creating a release.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.FirstUnstableTag">
            <summary>
            Gets or sets the first/default prerelease tag for new versions.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.FirstUnstableTagOrDefault">
            <summary>
            Gets or sets the first/default prerelease tag for new versions.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.IsFrozen">
            <summary>
            Gets a value indicating whether this instance rejects all attempts to mutate it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.Freeze">
            <summary>
            Freezes this instance so no more changes can be made to it.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.Equals(Nerdbank.GitVersioning.VersionOptions.ReleaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.ReleaseOptions,Nerdbank.GitVersioning.VersionOptions.ReleaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.ReleaseOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement">
            <summary>
            Possible increments of the version after creating release branches
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement.Major">
            <summary>
            Increment the major version after creating a release branch
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement.Minor">
            <summary>
            Increment the minor version after creating a release branch
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement.Build">
            <summary>
            Increment the build number (the third number in a version) after creating a release branch.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptionsContractResolver.ResolveContract(System.Type)">
            <summary>
            Obtains a contract for a given type.
            </summary>
            <param name="type">The type to obtain a contract for.</param>
            <returns>The contract.</returns>
            <remarks>
            This override changes the caching policy from the base class, which caches based on this.GetType().
            The inherited policy is problematic because we have instance properties that change the contract.
            So instead, we cache with a complex key to capture the settings as well.
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOracle">
            <summary>
            Assembles version information in a variety of formats.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOracle.Version0">
            <summary>
            The 0.0 version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOracle.assemblyInformationalVersionComponentCount">
            <summary>
            The number of version components (up to the 4 integers) to include in <see cref="P:Nerdbank.GitVersioning.VersionOracle.AssemblyInformationalVersion"/>.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOracle.#ctor(Nerdbank.GitVersioning.GitContext,Nerdbank.GitVersioning.ICloudBuild,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOracle"/> class.
            </summary>
            <param name="context">The git context from which to calculate version data.</param>
            <param name="cloudBuild">An optional cloud build provider that may offer additional context. Typically set to <see cref="P:Nerdbank.GitVersioning.CloudBuild.Active"/>.</param>
            <param name="overrideVersionHeightOffset">An optional value to override the version height offset.</param>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CommittedVersion">
            <summary>
            Gets the <see cref="P:Nerdbank.GitVersioning.VersionOracle.VersionOptions"/> that were deserialized from the contextual commit, if any.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.WorkingVersion">
            <summary>
            Gets the <see cref="P:Nerdbank.GitVersioning.VersionOracle.VersionOptions"/> that were deserialized from the working tree, if any.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildNumber">
            <summary>
            Gets the BuildNumber to set the cloud build to (if applicable).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildNumberEnabled">
            <summary>
            Gets a value indicating whether the cloud build number should be set.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildMetadataWithCommitId">
            <summary>
            Gets the build metadata identifiers, including the git commit ID as the first identifier if appropriate.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionFileFound">
            <summary>
            Gets a value indicating whether a version.json or version.txt file was found.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionOptions">
            <summary>
            Gets the version options used to initialize this instance.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.AssemblyVersion">
            <summary>
            Gets the version string to use for the <see cref="T:System.Reflection.AssemblyVersionAttribute"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.AssemblyFileVersion">
            <summary>
            Gets the version string to use for the <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.AssemblyInformationalVersion">
            <summary>
            Gets the version string to use for the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease">
            <summary>
            Gets or sets a value indicating whether the project is building
            in PublicRelease mode.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.PrereleaseVersion">
            <summary>
            Gets the prerelease version information, including a leading hyphen.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.PrereleaseVersionNoLeadingHyphen">
            <summary>
            Gets the prerelease version information, omitting the leading hyphen, if any.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SimpleVersion">
            <summary>
            Gets the version information without a Revision component.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildNumber">
            <summary>
            Gets the build number (i.e. third integer, or PATCH) for this version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionRevision">
            <summary>
            Gets the <see cref="P:System.Version.Revision"/> component of the <see cref="P:Nerdbank.GitVersioning.VersionOracle.Version"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.MajorMinorVersion">
            <summary>
            Gets the major.minor version string.
            </summary>
            <value>
            The x.y string (no build number or revision number).
            </value>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionMajor">
            <summary>
            Gets the <see cref="P:System.Version.Major"/> component of the <see cref="P:Nerdbank.GitVersioning.VersionOracle.Version"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionMinor">
            <summary>
            Gets the <see cref="P:System.Version.Minor"/> component of the <see cref="P:Nerdbank.GitVersioning.VersionOracle.Version"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.GitCommitId">
            <summary>
            Gets the Git revision control commit id for HEAD (the current source code version).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.GitCommitIdShort">
            <summary>
            Gets the first several characters of the Git revision control commit id for HEAD (the current source code version).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.GitCommitDate">
            <summary>
            Gets the Git revision control commit date for HEAD (the current source code version).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionHeight">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive)
            that set the version to the value at HEAD.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionHeightOffset">
            <summary>
            The offset to add to the <see cref="P:Nerdbank.GitVersioning.VersionOracle.VersionHeight"/>
            when calculating the integer to use as the <see cref="P:Nerdbank.GitVersioning.VersionOracle.BuildNumber"/>
            or elsewhere that the {height} macro is used.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildingRef">
            <summary>
            Gets the ref (branch or tag) being built.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.Version">
            <summary>
            Gets the version for this project, with up to 4 components.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildAllVarsEnabled">
            <summary>
            Gets a value indicating whether to set all cloud build variables prefaced with "NBGV_".
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildAllVars">
            <summary>
            Gets a dictionary of all cloud build variables that applies to this project,
            regardless of the current setting of <see cref="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildAllVarsEnabled"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildVersionVarsEnabled">
            <summary>
            Gets a value indicating whether to set cloud build version variables.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildVersionVars">
            <summary>
            Gets a dictionary of cloud build variables that applies to this project,
            regardless of the current setting of <see cref="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildVersionVarsEnabled"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildMetadata">
            <summary>
            Gets the list of build metadata identifiers to include in semver version strings.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildMetadataFragment">
            <summary>
            Gets the +buildMetadata fragment for the semantic version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NuGetPackageVersion">
            <summary>
            Gets the version to use for NuGet packages.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.ChocolateyPackageVersion">
            <summary>
            Gets the version to use for Chocolatey packages.
            </summary>
            <remarks>
            This always returns the NuGet subset of SemVer 1.0.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NpmPackageVersion">
            <summary>
            Gets the version to use for NPM packages.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer1">
            <summary>
            Gets a SemVer 1.0 compliant string that represents this version, including the -COMMITID suffix
            when <see cref="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer2">
            <summary>
            Gets a SemVer 2.0 compliant string that represents this version, including a +COMMITID suffix
            when <see cref="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer1NumericIdentifierPadding">
            <summary>
            Gets the minimum number of digits to use for numeric identifiers in SemVer 1.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildNumberOptions">
            <summary>
            Gets or sets the <see cref="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildNumberOptions"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NuGetSemVer1BuildMetadata">
            <summary>
            Gets the build metadata, compliant to the NuGet-compatible subset of SemVer 1.0.
            </summary>
            <remarks>
            When adding the git commit ID in a -prerelease tag, prefix a `g` because
            older NuGet clients (the ones that support only a subset of semver 1.0)
            cannot handle prerelease tags that begin with a number (which a git commit ID might).
            See <see href="https://github.com/dotnet/Nerdbank.GitVersioning/issues/260#issuecomment-445511898">this discussion</see>.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer1BuildMetadata">
            <summary>
            Gets the build metadata, compliant to SemVer 1.0.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NuGetSemVer1">
            <summary>
            Gets a SemVer 1.0 compliant string that represents this version, including the -gCOMMITID suffix
            when <see cref="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NuGetSemVer2">
            <summary>
            Gets a SemVer 2.0 compliant string that represents this version, including the -gCOMMITID suffix
            when <see cref="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer2BuildMetadata">
            <summary>
            Gets the build metadata that is appropriate for SemVer2 use.
            </summary>
            <remarks>
            We always put the commit ID in the -prerelease tag for non-public releases.
            But for public releases, we don't include it in the +buildMetadata section since it may be confusing for NuGet.
            See https://github.com/dotnet/Nerdbank.GitVersioning/pull/132#issuecomment-307208561
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.GitCommitIdShortForNonPublicPrereleaseTag">
            <summary>
            Gets the -gc0ffee or .gc0ffee suffix for the version.
            The g in the prefix might be changed if <see cref="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdPrefix"/> is set.
            </summary>
            <remarks>
            The prefix to the commit ID is to remain SemVer2 compliant particularly when the partial commit ID we use is made up entirely of numerals.
            SemVer2 forbids numerals to begin with leading zeros, but a git commit just might, so we begin with prefix always to avoid failures when the commit ID happens to be problematic.
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOracle.ReplaceMacros(System.String)">
            <summary>
            Replaces any macros found in a prerelease or build metadata string.
            </summary>
            <param name="prereleaseOrBuildMetadata">The prerelease or build metadata.</param>
            <returns>The specified string, with macros substituted for actual values.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.SemanticVersionExtensions">
            <summary>
            Extension methods for <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/>
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersionExtensions.NumericIdentifierRegex">
            <summary>
            A regex that matches on numeric identifiers for prerelease or build metadata.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersionExtensions.Increment(Nerdbank.GitVersioning.SemanticVersion,Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement)">
            <summary>
            Gets a new semantic with the specified version component (major/minor) incremented.
            </summary>
            <param name="currentVersion">The version to increment.</param>
            <param name="increment">Specifies whether to increment the major or minor version.</param>
            <returns>Returns a new <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> object with either the major or minor version incremented by 1.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersionExtensions.SetFirstPrereleaseTag(Nerdbank.GitVersioning.SemanticVersion,System.String)">
            <summary>
            Sets the first prerelease tag of the specified semantic version to the specified value.
            </summary>
            <param name="version">The version which's prerelease tag to modify.</param>
            <param name="newFirstTag">The new prerelease tag. The leading hyphen may be specified or omitted.</param>
            <returns>Returns a new instance of <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> with the updated prerelease tag</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersionExtensions.WithoutPrepreleaseTags(Nerdbank.GitVersioning.SemanticVersion)">
            <summary>
            Removes all prerelease tags from the semantic version.
            </summary>
            <param name="version">The version to remove the prerelease tags from.</param>
            <returns>Returns a new instance <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> which does not contain any prerelease tags.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersionExtensions.MakePrereleaseSemVer1Compliant(System.String,System.Int32)">
            <summary>
            Converts a semver 2 compliant "-beta.5" prerelease tag to a semver 1 compatible one.
            </summary>
            <param name="prerelease">The semver 2 prerelease tag, including its leading hyphen.</param>
            <param name="paddingSize">The minimum number of digits to use for any numeric identifier.</param>
            <returns>A semver 1 compliant prerelease tag. For example "-beta-0005".</returns>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "Kernel32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.System.SystemServices.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name = "hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            <para>If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateFile(System.String,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,System.Nullable{Windows.Win32.System.SystemServices.SECURITY_ATTRIBUTES},Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,System.Runtime.InteropServices.SafeHandle)">
            <inheritdoc cref = "M:Windows.Win32.PInvoke.CreateFile(Windows.Win32.System.SystemServices.PCWSTR,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,Windows.Win32.System.SystemServices.SECURITY_ATTRIBUTES*,Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,Windows.Win32.System.SystemServices.HANDLE)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateFile(Windows.Win32.System.SystemServices.PCWSTR,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,Windows.Win32.System.SystemServices.SECURITY_ATTRIBUTES*,Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,Windows.Win32.System.SystemServices.HANDLE)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows:\_file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <param name = "lpFileName">
            <para>The name of the file or device to be created or opened. You may use either forward slashes (/) or backslashes (\\) in this name.</para>
            <para>In the ANSI version of this function, the name is limited to <b>MAX_PATH</b> characters. To extend this limit to 32,767 wide characters, use this Unicode version of the function and prepend "\\\\?\\" to the path. For more information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/naming-a-file">Naming Files, Paths, and Namespaces</a>.</para>
            <para>For information on special device names, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/defining-an-ms-dos-device-name">Defining an MS-DOS Device Name</a>.</para>
            <para>To create a file stream, specify the name of the file, a colon, and then the name of the stream. For more information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-streams">File Streams</a>.</para>
            <para><div class="alert"><b>Tip</b>  Starting with Windows 10, version 1607, for the unicode version of this function (<b>CreateFileW</b>), you can opt-in to remove the <b>MAX_PATH</b> limitation without prepending "\\?\". See the "Maximum Path Length Limitation" section of <a href="https://docs.microsoft.com/windows/desktop/FileIO/naming-a-file">Naming Files, Paths, and Namespaces</a> for details.</div> <div> </div></para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name = "dwDesiredAccess">
            <para>The requested access to the file or device, which can be summarized as read, write, both or neither zero).</para>
            <para>The most commonly used values are <b>GENERIC_READ</b>, <b>GENERIC_WRITE</b>, or both (<c>GENERIC_READ | GENERIC_WRITE</c>). For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/generic-access-rights">Generic Access Rights</a>, <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-security-and-access-rights">File Security and Access Rights</a>, <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-access-rights-constants">File Access Rights Constants</a>, and <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a>.</para>
            <para>If this parameter is zero, the application can query certain metadata such as file, directory, or device attributes without accessing that file or device, even if <b>GENERIC_READ</b> access would have been denied.</para>
            <para>You cannot request an access mode that conflicts with the sharing mode that is specified by the <i>dwShareMode</i> parameter in an open request that already has an open handle.</para>
            <para>For more information, see the Remarks section of this topic and <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name = "dwShareMode">
            <para>The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table). Access requests to attributes or extended attributes are not affected by this flag.</para>
            <para>If this parameter is zero and <b>CreateFile</b> succeeds, the file or device cannot be shared and cannot be opened again until the handle to the file or device is closed. For more information, see the Remarks section.</para>
            <para>You cannot request a sharing mode that conflicts with the access mode that is specified in an existing request that has an open handle. <b>CreateFile</b> would fail and the <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function would return <b>ERROR_SHARING_VIOLATION</b>.</para>
            <para>To enable a process to share a file or device while another process has the file or device open, use a</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name = "lpSecurityAttributes">
            <para>A pointer to a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes.</para>
            <para>This parameter can be <b>NULL</b>.</para>
            <para>If this parameter is <b>NULL</b>, the handle returned by <b>CreateFile</b> cannot be inherited by any child processes the application may create and the file or device associated with the returned handle gets a default security descriptor.</para>
            <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_descriptor">SECURITY_DESCRIPTOR</a> for a file or device. If this member is <b>NULL</b>, the file or device associated with the returned handle is assigned a default security descriptor.</para>
            <para><b>CreateFile</b> ignores the <b>lpSecurityDescriptor</b> member when opening an existing file or device, but continues to use the <b>bInheritHandle</b> member.</para>
            <para>The <b>bInheritHandle</b>member of the structure specifies whether the returned handle can be inherited.</para>
            <para>For more information, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name = "dwCreationDisposition">
            <para>An action to take on a file or device that exists or does not exist.</para>
            <para>For devices other than files, this parameter is usually set to <b>OPEN_EXISTING</b>.</para>
            <para>For more information, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name = "dwFlagsAndAttributes">
            <para>The file or device attributes and flags, <b>FILE_ATTRIBUTE_NORMAL</b> being the most common default value for files. This parameter can include any combination of the available file attributes (<b>FILE_ATTRIBUTE_*</b>). All other file attributes override <b>FILE_ATTRIBUTE_NORMAL</b>. This parameter can also contain combinations of flags (<b>FILE_FLAG_*</b>) for control of file or device caching behavior, access modes, and other special-purpose flags. These combine with any <b>FILE_ATTRIBUTE_*</b> values. This parameter can also contain Security Quality of Service (SQOS) information by specifying the <b>SECURITY_SQOS_PRESENT</b> flag. Additional SQOS-related flags information is presented in the table following the attributes and flags tables. <div class="alert"><b>Note</b>  When <b>CreateFile</b> opens an existing file, it generally combines the file flags with the file attributes of the existing file, and ignores any file attributes supplied as part of <i>dwFlagsAndAttributes</i>. Special cases are detailed in <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>.</div> <div> </div> Some of the following file attributes and flags may only apply to files and not necessarily all other types of devices that <b>CreateFile</b> can open. For additional information, see the Remarks section of this topic and <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>. For more advanced access to file attributes, see <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileattributesa">SetFileAttributes</a>. For a complete list of all file attributes with their values and descriptions, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-attribute-constants">File Attribute Constants</a>. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name = "hTemplateFile">
            <para>A valid handle to a template file with the <b>GENERIC_READ</b> access right. The template file supplies file attributes and extended attributes for the file that is being created.</para>
            <para>This parameter can be <b>NULL</b>.</para>
            <para>When opening an existing file, <b>CreateFile</b> ignores this parameter.</para>
            <para>When opening a new encrypted file, the file inherits the discretionary access control list from its parent directory. For additional information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-encryption">File Encryption</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.</para>
            <para>If the function fails, the return value is <b>INVALID_HANDLE_VALUE</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.System.SystemServices.SECURITY_ATTRIBUTES">
            <summary>The SECURITY_ATTRIBUTES structure contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypesbase/ns-wtypesbase-security_attributes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.System.SystemServices.SECURITY_ATTRIBUTES.nLength">
            <summary>The size, in bytes, of this structure. Set this value to the size of the **SECURITY\_ATTRIBUTES** structure.</summary>
        </member>
        <member name="F:Windows.Win32.System.SystemServices.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            <para>A pointer to a [**SECURITY\_DESCRIPTOR**](../winnt/ns-winnt-security_descriptor.md) structure that controls access to the object. If the value of this member is **NULL**, the object is assigned the default security descriptor associated with the [*access token*](/windows/win32/secauthz/access-tokens) of the calling process. This is not the same as granting access to everyone by assigning a **NULL** [*discretionary access control list*](/windows/win32/secauthz/dacls-and-aces) (DACL). By default, the default DACL in the access token of a process allows access only to the user represented by the access token. For information about creating a security descriptor, see [Creating a Security Descriptor](/windows/win32/secauthz/creating-a-security-descriptor-for-a-new-object-in-c--).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypesbase/ns-wtypesbase-security_attributes#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.System.SystemServices.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>A Boolean value that specifies whether the returned handle is inherited when a new process is created. If this member is **TRUE**, the new process inherits the handle.</summary>
        </member>
        <member name="T:Windows.Win32.System.SystemServices.PCWSTR">
            <summary>
            A pointer to a constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.System.SystemServices.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.System.SystemServices.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.System.SystemServices.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array.
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref = "F:Windows.Win32.System.SystemServices.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.System.SystemServices.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Constants.INVALID_HANDLE_VALUE">
            <summary>There is no interactive user. The trust provider performs the verification action without the user's assistance.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wintrust/nf-wintrust-winverifytrustex">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
    </members>
</doc>
